{
  "address": "0x67F4d234aDAe224Ca84b2d69FbF626787a4eF90b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bankAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "chainlinkCoordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "LINK_ETH_feedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExcessiveHouseEdge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ForbiddenToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "linkWei",
          "type": "int256"
        }
      ],
      "name": "InvalidLinkWeiPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoOverchargedVRFCost",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFulfilled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPendingBet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenHasPendingBets",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minBetAmount",
          "type": "uint256"
        }
      ],
      "name": "UnderMinBetAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongGasValueToCoverFee",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "overchargedVRFCost",
          "type": "uint256"
        }
      ],
      "name": "AccountOverchargedVRFCost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainlinkVRFCost",
          "type": "uint256"
        }
      ],
      "name": "BetRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "overchargedVRFCost",
          "type": "uint256"
        }
      ],
      "name": "DistributeOverchargedVRFCost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributeTokenVRFFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vrfCost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "face",
          "type": "bool"
        }
      ],
      "name": "PlaceBet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "face",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "rolled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "Roll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "requestConfirmations",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasAfterCalculation",
          "type": "uint256"
        }
      ],
      "name": "SetChainlinkConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "houseEdge",
          "type": "uint16"
        }
      ],
      "name": "SetHouseEdge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "name": "SetVRFCallbackGasLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bank",
      "outputs": [
        {
          "internalType": "contract IBank",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "resolved",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vrfCost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "coinTossBets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "face",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "rolled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainlinkConfig",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "requestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "gasAfterCalculation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dataLength",
          "type": "uint256"
        }
      ],
      "name": "getLastUserBets",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "resolved",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "blockNumber",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "payout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "vrfCost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Game.Bet",
              "name": "bet",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "face",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "rolled",
                  "type": "bool"
                }
              ],
              "internalType": "struct CoinToss.CoinTossBet",
              "name": "coinTossBet",
              "type": "tuple"
            }
          ],
          "internalType": "struct CoinToss.FullCoinTossBet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "hasPendingBets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "refundBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "requestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "gasAfterCalculation",
          "type": "uint256"
        }
      ],
      "name": "setChainlinkConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "houseEdge",
          "type": "uint16"
        }
      ],
      "name": "setHouseEdge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "name": "setVRFCallbackGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "houseEdge",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "pendingCount",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "VRFCallbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "VRFFees",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userOverchargedVRFCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "face",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "wager",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "withdrawOverchargedVRFCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawTokensVRFFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x823cef331f865c037d3a9172e5a38b17313262001903467bbbffcd168696f7e6",
  "receipt": {
    "to": null,
    "from": "0x766a5882B53bAF0EFa8F7c99Fe4944A8C7c1102c",
    "contractAddress": "0x67F4d234aDAe224Ca84b2d69FbF626787a4eF90b",
    "transactionIndex": 3,
    "gasUsed": "2260607",
    "logsBloom": "0x
    "blockHash": "0x249b00dadbdcf593b48ed07065aafab9df2925cc5453a795b969e341acbb85c1",
    "transactionHash": "0x823cef331f865c037d3a9172e5a38b17313262001903467bbbffcd168696f7e6",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 27068641,
        "transactionHash": "0x823cef331f865c037d3a9172e5a38b17313262001903467bbbffcd168696f7e6",
        "address": "0x67F4d234aDAe224Ca84b2d69FbF626787a4eF90b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000766a5882b53baf0efa8f7c99fe4944a8c7c1102c"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x249b00dadbdcf593b48ed07065aafab9df2925cc5453a795b969e341acbb85c1"
      }
    ],
    "blockNumber": 27068641,
    "cumulativeGasUsed": "7384701",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0c3c4026a2D83965a5D0923332117A266Cbfb5c4",
    "0x6a2aad07396b36fe02a22b33cf443582f682c82f",
    "0xdc530d9457755926550b59e8eccdae7624181557"
  ],
  "solcInputHash": "76e85dfa1aef479a85f0072352fa9353",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bankAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainlinkCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LINK_ETH_feedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveHouseEdge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForbiddenToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"linkWei\",\"type\":\"int256\"}],\"name\":\"InvalidLinkWeiPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoOverchargedVRFCost\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFulfilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPendingBet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHasPendingBets\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"}],\"name\":\"UnderMinBetAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongGasValueToCoverFee\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overchargedVRFCost\",\"type\":\"uint256\"}],\"name\":\"AccountOverchargedVRFCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainlinkVRFCost\",\"type\":\"uint256\"}],\"name\":\"BetRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overchargedVRFCost\",\"type\":\"uint256\"}],\"name\":\"DistributeOverchargedVRFCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeTokenVRFFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vrfCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"face\",\"type\":\"bool\"}],\"name\":\"PlaceBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"face\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"rolled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Roll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasAfterCalculation\",\"type\":\"uint256\"}],\"name\":\"SetChainlinkConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"houseEdge\",\"type\":\"uint16\"}],\"name\":\"SetHouseEdge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"SetVRFCallbackGasLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"contract IBank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vrfCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coinTossBets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"face\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rolled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"gasAfterCalculation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getLastUserBets\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vrfCost\",\"type\":\"uint256\"}],\"internalType\":\"struct Game.Bet\",\"name\":\"bet\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"face\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rolled\",\"type\":\"bool\"}],\"internalType\":\"struct CoinToss.CoinTossBet\",\"name\":\"coinTossBet\",\"type\":\"tuple\"}],\"internalType\":\"struct CoinToss.FullCoinTossBet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hasPendingBets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"refundBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"gasAfterCalculation\",\"type\":\"uint256\"}],\"name\":\"setChainlinkConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"houseEdge\",\"type\":\"uint16\"}],\"name\":\"setHouseEdge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"setVRFCallbackGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"houseEdge\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"pendingCount\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"VRFCallbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"VRFFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userOverchargedVRFCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"face\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"wager\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawOverchargedVRFCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokensVRFFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Romuald Hog (based on Yakitori's Coin Toss)\",\"errors\":{\"InvalidLinkWeiPrice(int256)\":[{\"params\":{\"linkWei\":\"LINK/ETH price returned.\"}}],\"UnderMinBetAmount(uint256)\":[{\"params\":{\"minBetAmount\":\"Bet amount.\"}}]},\"events\":{\"AccountOverchargedVRFCost(address,uint256)\":{\"params\":{\"overchargedVRFCost\":\"Number of tokens overcharged.\",\"user\":\"Address of the user.\"}},\"BetRefunded(uint256,address,uint256,uint256)\":{\"params\":{\"amount\":\"Number of tokens refunded.\",\"chainlinkVRFCost\":\"The Chainlink VRF cost refunded to player.\",\"id\":\"The bet ID.\",\"user\":\"Address of the gamer.\"}},\"DistributeOverchargedVRFCost(address,uint256)\":{\"params\":{\"overchargedVRFCost\":\"Number of tokens refunded.\",\"user\":\"Address of the user.\"}},\"DistributeTokenVRFFees(address,uint256)\":{\"params\":{\"amount\":\"Number of tokens refunded.\",\"token\":\"Address of the token.\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"PlaceBet(uint256,address,address,uint256,uint256,bool)\":{\"params\":{\"amount\":\"The bet amount.\",\"face\":\"The chosen coin face.\",\"id\":\"The bet ID.\",\"token\":\"Address of the token.\",\"user\":\"Address of the gamer.\",\"vrfCost\":\"The Chainlink VRF cost paid by player.\"}},\"Roll(uint256,address,address,uint256,bool,bool,uint256)\":{\"params\":{\"amount\":\"The bet amount.\",\"face\":\"The chosen coin face.\",\"id\":\"The bet ID.\",\"payout\":\"The payout amount.\",\"rolled\":\"The rolled coin face.\",\"token\":\"Address of the token.\",\"user\":\"Address of the gamer.\"}},\"SetChainlinkConfig(uint16,bytes32,uint256)\":{\"params\":{\"gasAfterCalculation\":\"Gas to be added for VRF cost refund.\",\"keyHash\":\"Hash of the public key used to verify the VRF proof.\",\"requestConfirmations\":\"How many confirmations the Chainlink node should wait before responding.\"}},\"SetHouseEdge(address,uint16)\":{\"params\":{\"houseEdge\":\"House edge rate.\",\"token\":\"Address of the token.\"}},\"SetVRFCallbackGasLimit(address,uint32)\":{\"params\":{\"callbackGasLimit\":\"New Chainlink VRF callback gas limit.\",\"token\":\"Address of the token.\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"chainlinkCoordinatorAddress for bnb testnet is 0x6a2aad07396b36fe02a22b33cf443582f682c82fLINK_ETH_feedAddress for bnb testnet is 0x351ff08ff5077d6e8704a4763836fe187f074380\",\"params\":{\"LINK_ETH_feedAddress\":\"Address of the Chainlink LINK/ETH price feed.\",\"bankAddress\":\"The address of the bank.\",\"chainlinkCoordinatorAddress\":\"Address of the Chainlink VRF Coordinator.\"}},\"getChainlinkConfig()\":{\"params\":{\"gasAfterCalculation\":\"Gas to be added for VRF cost refund.\",\"keyHash\":\"Hash of the public key used to verify the VRF proof.\",\"requestConfirmations\":\"How many confirmations the Chainlink node should wait before responding.\"}},\"getLastUserBets(address,uint256)\":{\"params\":{\"dataLength\":\"The amount of bets to return.\",\"user\":\"Address of the gamer.\"},\"returns\":{\"_0\":\"A list of Coin Toss bet.\"}},\"hasPendingBets(address)\":{\"returns\":{\"_0\":\"Whether the token has pending bets.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"refundBet(uint256)\":{\"params\":{\"id\":\"The Bet ID.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setChainlinkConfig(uint16,bytes32,uint256)\":{\"params\":{\"gasAfterCalculation\":\"Gas to be added for VRF cost refund.\",\"keyHash\":\"Hash of the public key used to verify the VRF proof.\",\"requestConfirmations\":\"How many confirmations the Chainlink node should wait before responding.\"}},\"setHouseEdge(address,uint16)\":{\"details\":\"The house edge rate couldn't exceed 4%.\",\"params\":{\"houseEdge\":\"House edge rate.\",\"token\":\"Address of the token.\"}},\"setVRFCallbackGasLimit(address,uint32)\":{\"params\":{\"callbackGasLimit\":\"How much gas is needed in the Chainlink VRF callback.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"wager(bool,address,uint256)\":{\"params\":{\"face\":\"The chosen coin face.\",\"token\":\"Address of the token.\",\"tokenAmount\":\"The number of tokens bet.\"}},\"withdrawTokensVRFFees(address)\":{\"params\":{\"token\":\"Address of the token.\"}}},\"stateVariables\":{\"coinTossBets\":{\"details\":\"Coin faces: true = Tails, false = Heads.\"}},\"title\":\"BetSwirl's Coin Toss game\",\"version\":1},\"userdoc\":{\"errors\":{\"AccessDenied()\":[{\"notice\":\"Reverting error when sender isn't allowed.\"}],\"ExcessiveHouseEdge()\":[{\"notice\":\"House edge is capped at 4%.\"}],\"ForbiddenToken()\":[{\"notice\":\"Token is not allowed.\"}],\"InvalidAddress()\":[{\"notice\":\"Reverting error when provided address isn't valid.\"}],\"InvalidLinkWeiPrice(int256)\":[{\"notice\":\"Chainlink price feed not working\"}],\"NoOverchargedVRFCost()\":[{\"notice\":\"No user's overcharged Chainlink fee.\"}],\"NotFulfilled()\":[{\"notice\":\"Bet isn't resolved yet.\"}],\"NotPendingBet()\":[{\"notice\":\"Bet provided doesn't exist or was already resolved.\"}],\"TokenHasPendingBets()\":[{\"notice\":\"Reverting error when token has pending bets.\"}],\"UnderMinBetAmount(uint256)\":[{\"notice\":\"Insufficient bet amount.\"}],\"WrongGasValueToCoverFee()\":[{\"notice\":\"The msg.value is not enough to cover Chainlink's fee.\"}]},\"events\":{\"AccountOverchargedVRFCost(address,uint256)\":{\"notice\":\"Emitted after the overcharged VRF cost amount is accounted.\"},\"BetRefunded(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted after the bet amount is transfered to the user.\"},\"DistributeOverchargedVRFCost(address,uint256)\":{\"notice\":\"Emitted after the user's overcharged VRF cost amount is transfered.\"},\"DistributeTokenVRFFees(address,uint256)\":{\"notice\":\"Emitted after the token's VRF fees amount is transfered to the user.\"},\"PlaceBet(uint256,address,address,uint256,uint256,bool)\":{\"notice\":\"Emitted after a bet is placed.\"},\"Roll(uint256,address,address,uint256,bool,bool,uint256)\":{\"notice\":\"Emitted after a bet is rolled.\"},\"SetChainlinkConfig(uint16,bytes32,uint256)\":{\"notice\":\"Emitted after the Chainlink config is set.\"},\"SetHouseEdge(address,uint16)\":{\"notice\":\"Emitted after the house edge is set for a token.\"},\"SetVRFCallbackGasLimit(address,uint32)\":{\"notice\":\"Emitted after the Chainlink callback gas limit is set for a token.\"}},\"kind\":\"user\",\"methods\":{\"bank()\":{\"notice\":\"The bank that manage to payout a won bet and collect a loss bet.\"},\"bets(uint256)\":{\"notice\":\"Maps bets IDs to Bet information.\"},\"coinTossBets(uint256)\":{\"notice\":\"Maps bets IDs to chosen and rolled coin faces.\"},\"constructor\":{\"notice\":\"Initialize the game base contract.\"},\"getChainlinkConfig()\":{\"notice\":\"Returns the Chainlink VRF config.\"},\"getLastUserBets(address,uint256)\":{\"notice\":\"Gets the list of the last user bets.\"},\"hasPendingBets(address)\":{\"notice\":\"Returns whether the token has pending bets.\"},\"pause()\":{\"notice\":\"Pauses the contract to disable new bets.\"},\"refundBet(uint256)\":{\"notice\":\"Refunds the bet to the user if the Chainlink VRF callback failed.\"},\"setChainlinkConfig(uint16,bytes32,uint256)\":{\"notice\":\"Sets the Chainlink VRF V2 configuration.\"},\"setHouseEdge(address,uint16)\":{\"notice\":\"Sets the game house edge rate for a specific token.\"},\"setVRFCallbackGasLimit(address,uint32)\":{\"notice\":\"Sets the Chainlink VRF V2 configuration.\"},\"tokens(address)\":{\"notice\":\"Maps tokens addresses to token configuration.\"},\"userOverchargedVRFCost(address)\":{\"notice\":\"Maps user addresses to VRF overcharged cost.\"},\"wager(bool,address,uint256)\":{\"notice\":\"Creates a new bet and stores the chosen coin face.\"},\"withdrawOverchargedVRFCost(address)\":{\"notice\":\"Withdraw user's overcharged Chainlink fees.\"},\"withdrawTokensVRFFees(address)\":{\"notice\":\"Distributes the token's collected Chainlink fees.\"}},\"notice\":\"The game is played with a two-sided coin. The game's goal is to guess whether the lucky coin face will be Heads or Tails.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/games/CoinToss.sol\":\"CoinToss\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x35e30a35e23f856cbcee3558b7efdd83f6017a8f1b419710645143d98e892463\",\"license\":\"MIT\"},\"contracts/bank/IBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/// @notice Minimal interface for Bank.\\n/// @author Romuald Hog.\\ninterface IBank {\\n    /// @notice Gets the token's allow status used on the games smart contracts.\\n    /// @param token Address of the token.\\n    /// @return Whether the token is enabled for bets.\\n    function isAllowedToken(address token) external view returns (bool);\\n\\n    /// @notice Payouts a winning bet, and allocate the house edge fee.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param profit Number of tokens to be sent to the gamer.\\n    /// @param fees Bet amount and bet profit fees amount.\\n    function payout(\\n        address user,\\n        address token,\\n        uint256 profit,\\n        uint256 fees\\n    ) external payable;\\n\\n    /// @notice Accounts a loss bet.\\n    /// @dev In case of an ERC20, the bet amount should be transfered prior to this tx.\\n    /// @dev In case of the gas token, the bet amount is sent along with this tx.\\n    /// @param tokenAddress Address of the token.\\n    /// @param amount Loss bet amount.\\n    /// @param fees Bet amount and bet profit fees amount.\\n    function cashIn(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint256 fees\\n    ) external payable;\\n\\n    /// @notice Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\\n    /// @param token Address of the token.\\n    /// @param multiplier The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\\n    /// @return Maximum bet amount for the token.\\n    /// @dev The multiplier should be at least 10000.\\n    function getMaxBetAmount(address token, uint256 multiplier)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getVRFSubId(address token) external view returns (uint64);\\n\\n    function getTokenOwner(address token) external view returns (address);\\n\\n    function getMinBetAmount(address token) external view returns (uint256);\\n}\",\"keccak256\":\"0xda4506eebb4a9e60f37f14093f5eb0f442c819dee6b0046cca6003e699ee3fc4\",\"license\":\"MIT\"},\"contracts/games/CoinToss.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport {Game} from \\\"./Game.sol\\\";\\n \\n/// @title BetSwirl's Coin Toss game\\n/// @notice The game is played with a two-sided coin. The game's goal is to guess whether the lucky coin face will be Heads or Tails.\\n/// @author Romuald Hog (based on Yakitori's Coin Toss)\\ncontract CoinToss is Game {\\n    /// @notice Full coin toss bet information struct.\\n    /// @param bet The Bet struct information.\\n    /// @param diceBet The Coin Toss bet struct information.\\n    /// @dev Used to package bet information for the front-end.\\n    struct FullCoinTossBet {\\n        Bet bet;\\n        CoinTossBet coinTossBet;\\n    }\\n\\n    /// @notice Coin Toss bet information struct.\\n    /// @param face The chosen coin face.\\n    /// @param rolled The rolled coin face.\\n    struct CoinTossBet {\\n        bool face;\\n        bool rolled;\\n    }\\n\\n    /// @notice Maps bets IDs to chosen and rolled coin faces.\\n    /// @dev Coin faces: true = Tails, false = Heads.\\n    mapping(uint256 => CoinTossBet) public coinTossBets;\\n\\n    /// @notice Emitted after a bet is placed.\\n    /// @param id The bet ID.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param amount The bet amount.\\n    /// @param vrfCost The Chainlink VRF cost paid by player.\\n    /// @param face The chosen coin face.\\n    event PlaceBet(\\n        uint256 id,\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 vrfCost,\\n        bool face\\n    );\\n\\n    /// @notice Emitted after a bet is rolled.\\n    /// @param id The bet ID.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param amount The bet amount.\\n    /// @param face The chosen coin face.\\n    /// @param rolled The rolled coin face.\\n    /// @param payout The payout amount.\\n    event Roll(\\n        uint256 id,\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount,\\n        bool face,\\n        bool rolled,\\n        uint256 payout\\n    );\\n\\n    /// @notice Initialize the game base contract.\\n    /// @dev chainlinkCoordinatorAddress for bnb testnet is 0x6a2aad07396b36fe02a22b33cf443582f682c82f\\n    /// @dev LINK_ETH_feedAddress for bnb testnet is 0x351ff08ff5077d6e8704a4763836fe187f074380\\n    /// @param bankAddress The address of the bank.\\n    /// @param chainlinkCoordinatorAddress Address of the Chainlink VRF Coordinator.\\n    /// @param LINK_ETH_feedAddress Address of the Chainlink LINK/ETH price feed.\\n    constructor(\\n        address bankAddress,\\n        address chainlinkCoordinatorAddress,\\n        address LINK_ETH_feedAddress\\n    ) Game(bankAddress, chainlinkCoordinatorAddress, 1, LINK_ETH_feedAddress) {\\n        console.log( \\\"Cointoss initialized\\\");\\n    }\\n\\n    /// @notice Calculates the target payout amount.\\n    /// @param betAmount Bet amount.\\n    /// @return The target payout amount.\\n    function _getPayout(uint256 betAmount) private pure returns (uint256) {\\n        return betAmount * 2;\\n    }\\n\\n    /// @notice Creates a new bet and stores the chosen coin face.\\n    /// @param face The chosen coin face.\\n    /// @param token Address of the token.\\n    /// @param tokenAmount The number of tokens bet.\\n    function wager(\\n        bool face,\\n        address token,\\n        uint256 tokenAmount\\n    ) external payable whenNotPaused {\\n         console.log( \\\"Cointoss: Placing a new bet\\\");\\n\\n        Bet memory bet = _newBet(token, tokenAmount, _getPayout(10000));\\n       console.log( \\\"Cointoss: Placing a new bet\\\");\\n\\n        coinTossBets[bet.id].face = face;\\n       console.log( \\\"Cointoss: Placing set the face value\\\");\\n\\n       console.log( \\\"Cointoss: Emited the bet\\\");\\n\\n        emit PlaceBet(\\n            bet.id,\\n            bet.user,\\n            bet.token,\\n            bet.amount,\\n            bet.vrfCost,\\n            face\\n        );\\n    }\\n\\n    /// @notice Resolves the bet using the Chainlink randomness.\\n    /// @param id The bet ID.\\n    /// @param randomWords Random words list. Contains only one for this game.\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    function fulfillRandomWords(uint256 id, uint256[] memory randomWords)\\n        internal\\n        //override\\n    {\\n        //uint256 startGas = gasleft();\\n\\n        CoinTossBet storage coinTossBet = coinTossBets[id];\\n        Bet storage bet = bets[id];\\n\\n        uint256 rolled = randomWords[0] % 2;\\n\\n        bool[2] memory coinSides = [false, true];\\n        bool rolledCoinSide = coinSides[rolled];\\n        coinTossBet.rolled = rolledCoinSide;\\n        uint256 payout = _resolveBet(\\n            bet,\\n            rolledCoinSide == coinTossBet.face ?\\n                _getPayout(bet.amount) : 0\\n        );\\n\\n        emit Roll(\\n            bet.id,\\n            bet.user,\\n            bet.token,\\n            bet.amount,\\n            coinTossBet.face,\\n            rolledCoinSide,\\n            payout\\n        );\\n\\n        //_accountVRFCost(bet, startGas);\\n    }\\n\\n    /// @notice Gets the list of the last user bets.\\n    /// @param user Address of the gamer.\\n    /// @param dataLength The amount of bets to return.\\n    /// @return A list of Coin Toss bet.\\n    function getLastUserBets(address user, uint256 dataLength)\\n        external\\n        view\\n        returns (FullCoinTossBet[] memory)\\n    {\\n        Bet[] memory lastBets = _getLastUserBets(user, dataLength);\\n        FullCoinTossBet[] memory lastCoinTossBets = new FullCoinTossBet[](\\n            lastBets.length\\n        );\\n        for (uint256 i; i < lastBets.length; i++) {\\n            lastCoinTossBets[i] = FullCoinTossBet(\\n                lastBets[i],\\n                coinTossBets[lastBets[i].id]\\n            );\\n        }\\n        return lastCoinTossBets;\\n    }\\n}\",\"keccak256\":\"0x3eb132ddc5af291adc54130799c9a93191fae7f3f81ac89cc79db6240fd5d22b\",\"license\":\"MIT\"},\"contracts/games/Game.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Multicall} from \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n/*import {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";*/\\n\\nimport {IBank} from \\\"../bank/IBank.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n \\ninterface IVRFCoordinatorV2 is VRFCoordinatorV2Interface {\\n    function getFeeConfig()\\n        external\\n        view\\n        returns (\\n            uint32 fulfillmentFlatFeeLinkPPMTier1,\\n            uint32 fulfillmentFlatFeeLinkPPMTier2,\\n            uint32 fulfillmentFlatFeeLinkPPMTier3,\\n            uint32 fulfillmentFlatFeeLinkPPMTier4,\\n            uint32 fulfillmentFlatFeeLinkPPMTier5,\\n            uint24 reqsForTier2,\\n            uint24 reqsForTier3,\\n            uint24 reqsForTier4,\\n            uint24 reqsForTier5\\n        );\\n} \\n\\n/// @title Game base contract\\n/// @author Romuald Hog\\n/// @notice This should be parent contract of each games.\\n/// It defines all the games common functions and state variables.\\n/// @dev All rates are in basis point. Chainlink VRF v2 is used.\\nabstract contract Game is\\n    Ownable,\\n    Pausable,\\n    Multicall,\\n    //VRFConsumerBaseV2,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Bet information struct.\\n    /// @param resolved Whether the bet has been resolved.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param id Bet ID generated by Chainlink VRF.\\n    /// @param amount The bet amount.\\n    /// @param blockNumber Block number of the bet used to refund in case Chainlink's callback fail.\\n    /// @param payout The payout amount.\\n    /// @param vrfCost The Chainlink VRF cost paid by player.\\n    struct Bet {\\n        bool resolved;\\n        address user;\\n        address token;\\n        uint256 id;\\n        uint256 amount;\\n        uint256 blockNumber;\\n        uint256 payout;\\n        uint256 vrfCost;\\n    }\\n\\n    /// @notice Token struct.\\n    /// @param houseEdge House edge rate.\\n    /// @param pendingCount Number of pending bets.\\n    /// @param VRFCallbackGasLimit How much gas is needed in the Chainlink VRF callback.\\n    /// @param VRFFees Chainlink's VRF collected fees amount.\\n    struct Token {\\n        uint16 houseEdge;\\n        uint64 pendingCount;\\n        uint32 VRFCallbackGasLimit;\\n        uint256 VRFFees;\\n    }\\n\\n    /// @notice Chainlink VRF configuration struct.\\n    /// @param requestConfirmations How many confirmations the Chainlink node should wait before responding.\\n    /// @param numRandomWords How many random words is needed to resolve a game's bet.\\n    /// @param keyHash Hash of the public key used to verify the VRF proof.\\n    /// @param chainlinkCoordinator Reference to the VRFCoordinatorV2 deployed contract.\\n    /// @param gasAfterCalculation Gas to be added for VRF cost refund.\\n    struct ChainlinkConfig {\\n        uint16 requestConfirmations;\\n        uint16 numRandomWords;\\n        bytes32 keyHash;\\n       // IVRFCoordinatorV2 chainlinkCoordinator;\\n        VRFCoordinatorV2Interface COORDINATOR;\\n        uint256 gasAfterCalculation;\\n    }\\n\\n    /// @notice Chainlink VRF configuration state.\\n    ChainlinkConfig private _chainlinkConfig;\\n\\n    /// @notice Chainlink price feed.\\n    //AggregatorV3Interface private immutable _LINK_ETH_feed;\\n\\n    /// @notice Maps bets IDs to Bet information.\\n    mapping(uint256 => Bet) public bets;\\n\\n    /// @notice Maps users addresses to bets IDs\\n    mapping(address => uint256[]) internal _userBets;\\n\\n    /// @notice Maps tokens addresses to token configuration.\\n    mapping(address => Token) public tokens;\\n\\n    /// @notice Maps user addresses to VRF overcharged cost.\\n    mapping(address => uint256) public userOverchargedVRFCost;\\n\\n    /// @notice The bank that manage to payout a won bet and collect a loss bet.\\n    IBank public immutable bank;\\n\\n    /// @notice Emitted after the house edge is set for a token.\\n    /// @param token Address of the token.\\n    /// @param houseEdge House edge rate.\\n    event SetHouseEdge(address indexed token, uint16 houseEdge);\\n\\n    /// @notice Emitted after the Chainlink callback gas limit is set for a token.\\n    /// @param token Address of the token.\\n    /// @param callbackGasLimit New Chainlink VRF callback gas limit.\\n    event SetVRFCallbackGasLimit(\\n        address indexed token,\\n        uint32 callbackGasLimit\\n    );\\n\\n    /// @notice Emitted after the Chainlink config is set.\\n    /// @param requestConfirmations How many confirmations the Chainlink node should wait before responding.\\n    /// @param keyHash Hash of the public key used to verify the VRF proof.\\n    /// @param gasAfterCalculation Gas to be added for VRF cost refund.\\n    event SetChainlinkConfig(\\n        uint16 requestConfirmations,\\n        bytes32 keyHash,\\n        uint256 gasAfterCalculation\\n    );\\n\\n    /// @notice Emitted after the bet amount is transfered to the user.\\n    /// @param id The bet ID.\\n    /// @param user Address of the gamer.\\n    /// @param amount Number of tokens refunded.\\n    /// @param chainlinkVRFCost The Chainlink VRF cost refunded to player.\\n    event BetRefunded(\\n        uint256 id,\\n        address user,\\n        uint256 amount,\\n        uint256 chainlinkVRFCost\\n    );\\n\\n    /// @notice Emitted after the token's VRF fees amount is transfered to the user.\\n    /// @param token Address of the token.\\n    /// @param amount Number of tokens refunded.\\n    event DistributeTokenVRFFees(address indexed token, uint256 amount);\\n\\n    /// @notice Emitted after the user's overcharged VRF cost amount is transfered.\\n    /// @param user Address of the user.\\n    /// @param overchargedVRFCost Number of tokens refunded.\\n    event DistributeOverchargedVRFCost(\\n        address indexed user,\\n        uint256 overchargedVRFCost\\n    );\\n\\n    /// @notice Emitted after the overcharged VRF cost amount is accounted.\\n    /// @param user Address of the user.\\n    /// @param overchargedVRFCost Number of tokens overcharged.\\n    event AccountOverchargedVRFCost(\\n        address indexed user,\\n        uint256 overchargedVRFCost\\n    );\\n\\n    /// @notice No user's overcharged Chainlink fee.\\n    error NoOverchargedVRFCost();\\n\\n    /// @notice Insufficient bet amount.\\n    /// @param minBetAmount Bet amount.\\n    error UnderMinBetAmount(uint256 minBetAmount);\\n\\n    /// @notice Bet provided doesn't exist or was already resolved.\\n    error NotPendingBet();\\n\\n    /// @notice Bet isn't resolved yet.\\n    error NotFulfilled();\\n\\n    /// @notice House edge is capped at 4%.\\n    error ExcessiveHouseEdge();\\n\\n    /// @notice Token is not allowed.\\n    error ForbiddenToken();\\n\\n    /// @notice Chainlink price feed not working\\n    /// @param linkWei LINK/ETH price returned.\\n    error InvalidLinkWeiPrice(int256 linkWei);\\n\\n    /// @notice The msg.value is not enough to cover Chainlink's fee.\\n    error WrongGasValueToCoverFee();\\n\\n    /// @notice Reverting error when sender isn't allowed.\\n    error AccessDenied();\\n\\n    /// @notice Reverting error when provided address isn't valid.\\n    error InvalidAddress();\\n\\n    /// @notice Reverting error when token has pending bets.\\n    error TokenHasPendingBets();\\n\\n    /// @notice Initialize contract's state variables and VRF Consumer.\\n    /// @param bankAddress The address of the bank.\\n    /// @param chainlinkCoordinatorAddress Address of the Chainlink VRF Coordinator.\\n    /// @param numRandomWords How many random words is needed to resolve a game's bet.\\n    /// @param LINK_ETH_feedAddress Address of the Chainlink LINK/ETH price feed.\\n    constructor(\\n        address bankAddress,\\n        address chainlinkCoordinatorAddress,\\n        uint16 numRandomWords,\\n        address LINK_ETH_feedAddress\\n    )  {\\n               console.log( \\\"Bank:Initilized\\\");\\n\\n        if (\\n            LINK_ETH_feedAddress == address(0) ||\\n            chainlinkCoordinatorAddress == address(0) ||\\n            bankAddress == address(0)\\n        ) {\\n            console.log( \\\"Bank:Reverted by duplicated accounts ln:227\\\");\\n\\n            revert InvalidAddress();\\n        }\\n        require(\\n            numRandomWords != 0 && numRandomWords <= 500,\\n            \\\"Wrong Chainlink NumRandomWords\\\"\\n        );\\n\\n        bank = IBank(bankAddress);\\n       _chainlinkConfig.COORDINATOR = VRFCoordinatorV2Interface(\\n            chainlinkCoordinatorAddress\\n        ); \\n        _chainlinkConfig.numRandomWords = numRandomWords;\\n        //_LINK_ETH_feed = AggregatorV3Interface(LINK_ETH_feedAddress);\\n    }\\n\\n    /// @notice Calculates the amount's fee based on the house edge.\\n    /// @param token Address of the token.\\n    /// @param amount From which the fee amount will be calculated.\\n    /// @return The fee amount.\\n    function _getFees(address token, uint256 amount)  private    view returns (uint256) {\\n        return (tokens[token].houseEdge * amount) / 10000;\\n    }\\n\\n    /// @notice Creates a new bet and request randomness to Chainlink,\\n    /// transfer the ERC20 tokens to the contract or refund the bet amount overflow if the bet amount exceed the maxBetAmount.\\n    /// @param tokenAddress Address of the token.\\n    /// @param tokenAmount The number of tokens bet.\\n    /// @param multiplier The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\\n    /// @return A new Bet struct information.\\n    function _newBet( address tokenAddress,  uint256 tokenAmount,  uint256 multiplier ) internal whenNotPaused nonReentrant returns (Bet memory) {\\n         console.log( \\\"Bank:Setting the new bet\\\");\\n\\n        Token storage token = tokens[tokenAddress];\\n        if (\\n            bank.isAllowedToken(tokenAddress) == false || token.houseEdge == 0\\n        ) {\\n            revert ForbiddenToken();\\n        }\\n\\n        address user = msg.sender;\\n        bool isGasToken = tokenAddress == address(0);\\n        uint256 fee = isGasToken ? (msg.value - tokenAmount) : msg.value;\\n        uint256 betAmount = isGasToken ? msg.value - fee : tokenAmount;\\n\\n       /* // Charge user for Chainlink VRF fee.\\n        {\\n            uint256 chainlinkVRFCost = getChainlinkVRFCost(tokenAddress);\\n            if (fee < (chainlinkVRFCost - ((10 * chainlinkVRFCost) / 100))) {\\n                // 10% slippage.\\n                revert WrongGasValueToCoverFee();\\n            }\\n        }*/\\n\\n        // Bet amount is capped.\\n        {\\n            uint256 minBetAmount = bank.getMinBetAmount(tokenAddress);\\n            if (betAmount < minBetAmount) {\\n                revert UnderMinBetAmount(minBetAmount);\\n            }\\n\\n            uint256 maxBetAmount = bank.getMaxBetAmount(\\n                tokenAddress,\\n                multiplier\\n            );\\n            if (betAmount > maxBetAmount) {\\n                if (isGasToken) {\\n                    Address.sendValue(payable(user), betAmount - maxBetAmount);\\n                }\\n                betAmount = maxBetAmount;\\n            }\\n        }\\n        console.log( \\\"Bank:setting id :ln:308\\\");\\n\\n        // Create bet\\n        uint256 id =  _chainlinkConfig.COORDINATOR.requestRandomWords(\\n            _chainlinkConfig.keyHash,\\n            bank.getVRFSubId(tokenAddress),\\n            _chainlinkConfig.requestConfirmations,\\n            token.VRFCallbackGasLimit,\\n            _chainlinkConfig.numRandomWords\\n        ); \\n        console.log( \\\"Bank:Storing the bet\\\");\\n        Bet memory newBet = Bet(\\n            false,\\n            user,\\n            tokenAddress,\\n            id,\\n            betAmount,\\n            block.number,\\n            0,\\n            fee\\n        );\\n        _userBets[user].push(id);\\n        bets[id] = newBet;\\n        token.pendingCount++;\\n\\n        // If ERC20, transfer the tokens\\n        if (!isGasToken) {\\n            console.log( \\\"Bank:If ERC20, transfer the tokens\\\");\\n\\n            IERC20(tokenAddress).safeTransferFrom(\\n                user,\\n                address(this),\\n                betAmount\\n            );\\n        }\\n            console.log( \\\"Bank:Return bet\\\");\\n\\n        return newBet;\\n    }\\n\\n    /*/// @notice Calculates the overcharged VRF cost based on the gas consumed.\\n    /// @param bet The Bet struct information.\\n    /// @param startGas Gas amount at start.\\n    function _accountVRFCost(Bet storage bet, uint256 startGas) internal {\\n   //     (, int256 weiPerUnitLink, , , ) = _LINK_ETH_feed.latestRoundData();\\n        if (weiPerUnitLink < 0) {\\n            weiPerUnitLink = 0;\\n        }\\n        // Get Chainlink VRF v2 fee amount.\\n        (\\n            uint32 fulfillmentFlatFeeLinkPPMTier1,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n\\n        ) = _chainlinkConfig.chainlinkCoordinator.getFeeConfig();\\n        // Calculates the VRF premium fee in ETH\\n        uint256 chainlinkPremium = ((1e12 *\\n            uint256(fulfillmentFlatFeeLinkPPMTier1) *\\n            uint256(weiPerUnitLink)) / 1e18);\\n            \\n        // Calculate the gas fee (adding the estimated gas spent after this calculation) + premium\\n        uint256 actualVRFCost = (tx.gasprice *\\n            (startGas - gasleft() + _chainlinkConfig.gasAfterCalculation)) +\\n            chainlinkPremium;\\n\\n        // If the actual VRF cost is higher than what the player paid.\\n        if (actualVRFCost > bet.vrfCost) {\\n            actualVRFCost = bet.vrfCost;\\n        } else {\\n            // Otherwise credits it to his account.\\n            uint256 overchargedVRFCost = bet.vrfCost - actualVRFCost;\\n            userOverchargedVRFCost[bet.user] += overchargedVRFCost;\\n            bet.vrfCost = actualVRFCost;\\n            emit AccountOverchargedVRFCost(bet.user, overchargedVRFCost);\\n        }\\n\\n        // Credits the actual VRF cost to fund the VRF subscription.\\n        tokens[bet.token].VRFFees += actualVRFCost;\\n    }*/\\n    /// @notice Resolves the bet based on the game child contract result.\\n    /// In case bet is won, the bet amount minus the house edge is transfered to user from the game contract, and the profit is transfered to the user from the Bank.\\n    /// In case bet is lost, the bet amount is transfered to the Bank from the game contract.\\n    /// @param bet The Bet struct information.\\n    /// @param payout What should be sent to the user in case of a won bet. Payout = bet amount + profit amount.\\n    /// @return The payout amount.\\n    /// @dev Should not revert as it resolves the bet with the randomness.\\n    function _resolveBet(Bet storage bet, uint256 payout)  internal  returns (uint256)  {\\n        if (bet.resolved == true || bet.id == 0) {\\n            revert NotPendingBet();\\n        }\\n        bet.resolved = true;\\n\\n        address token = bet.token;\\n        tokens[token].pendingCount--;\\n\\n        uint256 betAmount = bet.amount;\\n        bool isGasToken = bet.token == address(0);\\n\\n        if (payout > betAmount) {\\n            // The user has won more than his bet\\n            address user = bet.user;\\n\\n            uint256 profit = payout - betAmount;\\n            uint256 betAmountFee = _getFees(token, betAmount);\\n            uint256 profitFee = _getFees(token, profit);\\n            uint256 fee = betAmountFee + profitFee;\\n\\n            payout -= fee;\\n\\n            uint256 betAmountPayout = betAmount - betAmountFee;\\n            uint256 profitPayout = profit - profitFee;\\n            // Transfer the bet amount payout to the player\\n            if (isGasToken) {\\n                Address.sendValue(payable(user), betAmountPayout);\\n            } else {\\n                IERC20(token).safeTransfer(user, betAmountPayout);\\n                // Transfer the bet amount fee to the bank.\\n                IERC20(token).safeTransfer(address(bank), betAmountFee);\\n            }\\n\\n            // Transfer the payout from the bank, the bet amount fee to the bank, and account fees.\\n            bank.payout{value: isGasToken ? betAmountFee : 0}(\\n                user,\\n                token,\\n                profitPayout,\\n                fee\\n            );\\n        } else if (payout > 0) {\\n            // The user has won something smaller than his bet\\n            address user = bet.user;\\n\\n            uint256 fee = _getFees(token, payout);\\n            payout -= fee;\\n            uint256 bankCashIn = betAmount - payout;\\n\\n            // Transfer the bet amount payout to the player\\n            if (isGasToken) {\\n                Address.sendValue(payable(user), payout);\\n            } else {\\n                IERC20(token).safeTransfer(user, payout);\\n                // Transfer the lost bet amount and fee to the bank\\n                IERC20(token).safeTransfer(address(bank), bankCashIn);\\n            }\\n\\n            bank.cashIn{value: isGasToken ? bankCashIn : 0}(\\n                token,\\n                bankCashIn,\\n                fee\\n            );\\n        } else {\\n            // The user did not win anything\\n            if (!isGasToken) {\\n                IERC20(token).safeTransfer(address(bank), betAmount);\\n            }\\n            bank.cashIn{value: isGasToken ? betAmount : 0}(token, betAmount, 0);\\n        }\\n\\n        bet.payout = payout;\\n        return payout;\\n    }\\n\\n    /// @notice Gets the list of the last user bets.\\n    /// @param user Address of the gamer.\\n    /// @param dataLength The amount of bets to return.\\n    /// @return A list of Bet.\\n    function _getLastUserBets(address user, uint256 dataLength)\\n        internal\\n        view\\n        returns (Bet[] memory)\\n    {\\n        uint256[] memory userBetsIds = _userBets[user];\\n        uint256 betsLength = userBetsIds.length;\\n\\n        if (betsLength < dataLength) {\\n            dataLength = betsLength;\\n        }\\n\\n        Bet[] memory userBets = new Bet[](dataLength);\\n        if (dataLength != 0) {\\n            uint256 userBetsIndex;\\n            for (uint256 i = betsLength; i > betsLength - dataLength; i--) {\\n                userBets[userBetsIndex] = bets[userBetsIds[i - 1]];\\n                userBetsIndex++;\\n            }\\n        }\\n\\n        return userBets;\\n    }\\n\\n    /// @notice Sets the game house edge rate for a specific token.\\n    /// @param token Address of the token.\\n    /// @param houseEdge House edge rate.\\n    /// @dev The house edge rate couldn't exceed 4%.\\n    function setHouseEdge(address token, uint16 houseEdge) external onlyOwner {\\n        if (houseEdge > 400) {\\n            revert ExcessiveHouseEdge();\\n        }\\n        if (hasPendingBets(token)) {\\n            revert TokenHasPendingBets();\\n        }\\n        tokens[token].houseEdge = houseEdge;\\n        emit SetHouseEdge(token, houseEdge);\\n    }\\n\\n    /// @notice Pauses the contract to disable new bets.\\n    function pause() external onlyOwner {\\n        if (paused()) {\\n            _unpause();\\n        } else {\\n            _pause();\\n        }\\n    }\\n\\n    /// @notice Sets the Chainlink VRF V2 configuration.\\n    /// @param requestConfirmations How many confirmations the Chainlink node should wait before responding.\\n    /// @param keyHash Hash of the public key used to verify the VRF proof.\\n    /// @param gasAfterCalculation Gas to be added for VRF cost refund.\\n    function setChainlinkConfig(\\n        uint16 requestConfirmations,\\n        bytes32 keyHash,\\n        uint256 gasAfterCalculation\\n    ) external onlyOwner {\\n        _chainlinkConfig.requestConfirmations = requestConfirmations;\\n        _chainlinkConfig.keyHash = keyHash;\\n        _chainlinkConfig.gasAfterCalculation = gasAfterCalculation;\\n        emit SetChainlinkConfig(\\n            requestConfirmations,\\n            keyHash,\\n            gasAfterCalculation\\n        );\\n    }\\n\\n    /// @notice Sets the Chainlink VRF V2 configuration.\\n    /// @param callbackGasLimit How much gas is needed in the Chainlink VRF callback.\\n    function setVRFCallbackGasLimit(address token, uint32 callbackGasLimit)\\n        external\\n        onlyOwner\\n    {\\n        tokens[token].VRFCallbackGasLimit = callbackGasLimit;\\n        emit SetVRFCallbackGasLimit(token, callbackGasLimit);\\n    }\\n\\n    /// @notice Distributes the token's collected Chainlink fees.\\n    /// @param token Address of the token.\\n    function withdrawTokensVRFFees(address token) external {\\n        uint256 tokenChainlinkFees = tokens[token].VRFFees;\\n        if (tokenChainlinkFees != 0) {\\n            delete tokens[token].VRFFees;\\n            Address.sendValue(\\n                payable(bank.getTokenOwner(token)),\\n                tokenChainlinkFees\\n            );\\n            emit DistributeTokenVRFFees(token, tokenChainlinkFees);\\n        }\\n    }\\n\\n    /// @notice Withdraw user's overcharged Chainlink fees.\\n    function withdrawOverchargedVRFCost(address user) external {\\n        uint256 overchargedVRFCost = userOverchargedVRFCost[user];\\n        if (overchargedVRFCost == 0) {\\n            revert NoOverchargedVRFCost();\\n        }\\n\\n        delete userOverchargedVRFCost[user];\\n        Address.sendValue(payable(user), overchargedVRFCost);\\n        emit DistributeOverchargedVRFCost(user, overchargedVRFCost);\\n    }\\n\\n    /// @notice Refunds the bet to the user if the Chainlink VRF callback failed.\\n    /// @param id The Bet ID.\\n    function refundBet(uint256 id) external {\\n        Bet storage bet = bets[id];\\n        if (bet.resolved == true || bet.id == 0) {\\n            revert NotPendingBet();\\n        } else if (block.number < bet.blockNumber + 30) {\\n            revert NotFulfilled();\\n        }\\n\\n        Token storage token = tokens[bet.token];\\n        token.pendingCount--;\\n\\n        bet.resolved = true;\\n        bet.payout = bet.amount;\\n\\n        uint256 chainlinkVRFCost = bet.vrfCost;\\n        if (bet.token == address(0)) {\\n            Address.sendValue(payable(bet.user), bet.amount + chainlinkVRFCost);\\n        } else {\\n            IERC20(bet.token).safeTransfer(bet.user, bet.amount);\\n            Address.sendValue(payable(bet.user), chainlinkVRFCost);\\n        }\\n\\n        emit BetRefunded(id, bet.user, bet.amount, chainlinkVRFCost);\\n    }\\n\\n    /// @notice Returns the Chainlink VRF config.\\n    /// @param requestConfirmations How many confirmations the Chainlink node should wait before responding.\\n    /// @param keyHash Hash of the public key used to verify the VRF proof.\\n    /// @param gasAfterCalculation Gas to be added for VRF cost refund.\\n    function getChainlinkConfig()\\n        external\\n        view\\n        returns (\\n            uint16 requestConfirmations,\\n            bytes32 keyHash,\\n           \\n            uint256 gasAfterCalculation\\n        )\\n    {\\n        return (\\n            _chainlinkConfig.requestConfirmations,\\n            _chainlinkConfig.keyHash,\\n          \\n            _chainlinkConfig.gasAfterCalculation\\n        );\\n    }\\n\\n    /// @notice Returns whether the token has pending bets.\\n    /// @return Whether the token has pending bets.\\n    function hasPendingBets(address token) public view returns (bool) {\\n        return tokens[token].pendingCount != 0;\\n    }\\n    /*\\n    /// @notice Returns the amount of ETH that should be passed to the wager transaction.\\n    /// to cover Chainlink VRF fee.\\n    /// @return The bet resolution cost amount.\\n    function getChainlinkVRFCost(address token) public view returns (uint256) {\\n        (, int256 weiPerUnitLink, , , ) = _LINK_ETH_feed.latestRoundData();\\n        if (weiPerUnitLink <= 0) {\\n            revert InvalidLinkWeiPrice(weiPerUnitLink);\\n        }\\n        // Get Chainlink VRF v2 fee amount.\\n        (\\n            uint32 fulfillmentFlatFeeLinkPPMTier1,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n\\n        ) = _chainlinkConfig.chainlinkCoordinator.getFeeConfig();\\n        // 115000 gas is the average Verification gas of Chainlink VRF.\\n        return\\n            (tx.gasprice * (115000 + tokens[token].VRFCallbackGasLimit)) +\\n            ((1e12 *\\n                uint256(fulfillmentFlatFeeLinkPPMTier1) *\\n                uint256(weiPerUnitLink)) / 1e18);\\n    }*/\\n}\",\"keccak256\":\"0x53ebc7d4fb16e6c5fc40a4672656338b5d208c1e95a4d903a5cd49479c1b9563\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c80637d0807d7116100ab578063c2fb579f1161006f578063c2fb579f14610429578063e051ece914610456578063e1fdb4b4146104a6578063e32fe504146104c6578063e4860339146104e6578063f2fde38b1461057757600080fd5b80637d0807d71461037357806382b0c00b146103a95780638456cb59146103c95780638da5cb5b146103de578063ac9650d8146103fc57600080fd5b80637038942f116100f25780637038942f146102b2578063707cd55e146102d2578063715018a6146102f257806376cdb03b1461030757806378bcde221461035357600080fd5b806322af00fa1461012f578063277d35af146101ec57806350462ea014610227578063594043fd1461023c5780635c975abb14610293575b600080fd5b34801561013b57600080fd5b5061019e61014a36600461201e565b6006602081905260009182526040909120805460018201546002830154600384015460048501546005860154959096015460ff8516966101009095046001600160a01b039081169694169492939192919088565b6040805198151589526001600160a01b0397881660208a015295909616948701949094526060860192909252608085015260a084015260c083015260e0820152610100015b60405180910390f35b3480156101f857600080fd5b5061021961020736600461204c565b60096020526000908152604090205481565b6040519081526020016101e3565b61023a610235366004612077565b610597565b005b34801561024857600080fd5b5061028361025736600461204c565b6001600160a01b03166000908152600860205260409020546201000090046001600160401b0316151590565b60405190151581526020016101e3565b34801561029f57600080fd5b50600054600160a01b900460ff16610283565b3480156102be57600080fd5b5061023a6102cd36600461204c565b610737565b3480156102de57600080fd5b5061023a6102ed36600461204c565b6107db565b3480156102fe57600080fd5b5061023a6108e7565b34801561031357600080fd5b5061033b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101e3565b34801561035f57600080fd5b5061023a61036e3660046120cf565b6108fb565b34801561037f57600080fd5b506002546003546005546040805161ffff90941684526020840192909252908201526060016101e3565b3480156103b557600080fd5b5061023a6103c4366004612104565b6109cb565b3480156103d557600080fd5b5061023a610a36565b3480156103ea57600080fd5b506000546001600160a01b031661033b565b34801561040857600080fd5b5061041c610417366004612137565b610a60565b6040516101e391906121fb565b34801561043557600080fd5b5061044961044436600461225d565b610b55565b6040516101e39190612289565b34801561046257600080fd5b5061048f61047136600461201e565b600a6020526000908152604090205460ff8082169161010090041682565b6040805192151583529015156020830152016101e3565b3480156104b257600080fd5b5061023a6104c136600461201e565b610c88565b3480156104d257600080fd5b5061023a6104e136600461233f565b610e57565b3480156104f257600080fd5b5061053f61050136600461204c565b6008602052600090815260409020805460019091015461ffff8216916201000081046001600160401b031691600160501b90910463ffffffff169084565b6040805161ffff90951685526001600160401b03909316602085015263ffffffff9091169183019190915260608201526080016101e3565b34801561058357600080fd5b5061023a61059236600461204c565b610eca565b61059f610f8b565b6105dd6040518060400160405280601b81526020017f436f696e746f73733a20506c6163696e672061206e6577206265740000000000815250610f48565b60006105f483836105ef612710610fd8565b610fe5565b90506106346040518060400160405280601b81526020017f436f696e746f73733a20506c6163696e672061206e6577206265740000000000815250610f48565b6060818101516000908152600a6020908152604091829020805460ff191688151517905581519283019091526024808352610676929161259490830139610f48565b6106b46040518060400160405280601881526020017f436f696e746f73733a20456d6974656420746865206265740000000000000000815250610f48565b80604001516001600160a01b031681602001516001600160a01b03167fa056e15b055f378463e53b317d9503bc9aba54ace23957ea9ff7fbfa0bf2efc0836060015184608001518560e00151896040516107299493929190938452602084019290925260408301521515606082015260800190565b60405180910390a350505050565b6001600160a01b0381166000908152600960205260408120549081900361077157604051638ab4c5d760e01b815260040160405180910390fd5b6001600160a01b03821660009081526009602052604081205561079482826116e3565b816001600160a01b03167f3f206d449945dd03c1742ee98a9c5b872ac6c165788363e06af2796dd5de1f54826040516107cf91815260200190565b60405180910390a25050565b6001600160a01b03811660009081526008602052604090206001015480156108e3576001600160a01b038281166000818152600860205260408082206001019190915551636e0be4e560e11b815260048101919091526108a8917f0000000000000000000000000000000000000000000000000000000000000000169063dc17c9ca90602401602060405180830381865afa15801561087e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a29190612381565b826116e3565b816001600160a01b03167f1d3f9fc0810d9e182e982399cb91de735f6c415728fb9bc42664b84087c2af56826040516107cf91815260200190565b5050565b6108ef611801565b6108f9600061185b565b565b610903611801565b6101908161ffff16111561092a57604051631c2d5dd360e21b815260040160405180910390fd5b6001600160a01b0382166000908152600860205260409020546201000090046001600160401b0316156109705760405163055212b760e51b815260040160405180910390fd5b6001600160a01b038216600081815260086020908152604091829020805461ffff191661ffff861690811790915591519182527f7dfd3ecb8ac83242184c019f85ca408558f2ac0a5a19af6be2a4aee697eac81291016107cf565b6109d3611801565b6002805461ffff191661ffff851690811790915560038390556005829055604080519182526020820184905281018290527fdb0c33bbe22ccb7d7c379a53ef932b131d6fb1b3bd0a7cfe7247d9513ba2a22a9060600160405180910390a1505050565b610a3e611801565b600054600160a01b900460ff1615610a58576108f96118ab565b6108f9611900565b6060816001600160401b03811115610a7a57610a7a61239e565b604051908082528060200260200182016040528015610aad57816020015b6060815260200190600190039081610a985790505b50905060005b82811015610b4d57610b1d30858584818110610ad157610ad16123b4565b9050602002810190610ae391906123ca565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061194392505050565b828281518110610b2f57610b2f6123b4565b60200260200101819052508080610b459061242d565b915050610ab3565b505b92915050565b60606000610b63848461196f565b9050600081516001600160401b03811115610b8057610b8061239e565b604051908082528060200260200182016040528015610bb957816020015b610ba6611f87565b815260200190600190039081610b9e5790505b50905060005b8251811015610c7f576040518060400160405280848381518110610be557610be56123b4565b60200260200101518152602001600a6000868581518110610c0857610c086123b4565b60209081029190910181015160600151825281810192909252604090810160002081518083019092525460ff808216151583526101009091041615159181019190915290528251839083908110610c6157610c616123b4565b60200260200101819052508080610c779061242d565b915050610bbf565b50949350505050565b6000818152600660205260409020805460ff16151560011480610cad57506002810154155b15610ccb576040516310d5f2bd60e11b815260040160405180910390fd5b6004810154610cdb90601e612446565b431015610cfb576040516303de361f60e11b815260040160405180910390fd5b60018101546001600160a01b0316600090815260086020526040902080546201000090046001600160401b0316816002610d3483612459565b82546001600160401b039182166101009390930a928302919092021990911617905550815460ff191660019081178355600383015460058401556006830154908301546001600160a01b0316610db35782546003840154610dae9161010090046001600160a01b031690610da9908490612446565b6116e3565b610df8565b825460038401546001850154610dde926001600160a01b039182169261010090910490911690611b45565b8254610df89061010090046001600160a01b0316826116e3565b82546003840154604080518781526101009093046001600160a01b03166020840152820152606081018290527fe282fd838bb937af0c0f54e49ba5f86229ed0c90344c3cc4e2135cb673493e699060800160405180910390a150505050565b610e5f611801565b6001600160a01b038216600081815260086020908152604091829020805463ffffffff60501b1916600160501b63ffffffff87169081029190911790915591519182527f9edb52532d26512950c91a14b132f6df3cd06bfb49e795e03e56736121cd24a891016107cf565b610ed2611801565b6001600160a01b038116610f3c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610f458161185b565b50565b610f4581604051602401610f5c919061247c565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052611ba8565b600054600160a01b900460ff16156108f95760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610f33565b6000610b4f82600261248f565b610fed611fc5565b610ff5610f8b565b6002600154036110475760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610f33565b600260015560408051808201909152601881527f42616e6b3a53657474696e6720746865206e6577206265740000000000000000602082015261108990610f48565b6001600160a01b0384811660008181526008602052604090819020905163cbe230c360e01b81526004810192909252917f0000000000000000000000000000000000000000000000000000000000000000169063cbe230c390602401602060405180830381865afa158015611102573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112691906124a6565b15806111355750805461ffff16155b156111535760405163c455905560e01b815260040160405180910390fd5b336001600160a01b0386161560008161116c5734611176565b61117687346124c3565b9050600082611185578761118f565b61118f82346124c3565b60405163f6b2a2f160e01b81526001600160a01b038b811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063f6b2a2f190602401602060405180830381865afa1580156111fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121f91906124d6565b905080821015611244576040516289563d60e21b815260048101829052602401610f33565b6040516313c59cef60e11b81526001600160a01b038b81166004830152602482018a90526000917f00000000000000000000000000000000000000000000000000000000000000009091169063278b39de90604401602060405180830381865afa1580156112b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112da91906124d6565b9050808311156112fc5784156112f8576112f886610da983866124c3565b8092505b505061133c6040518060400160405280601781526020017f42616e6b3a73657474696e67206964203a6c6e3a333038000000000000000000815250610f48565b6004805460035460405163279e341560e01b81526001600160a01b038d81169482019490945260009392831692635d3b1d3092917f00000000000000000000000000000000000000000000000000000000000000009091169063279e341590602401602060405180830381865afa1580156113bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113df91906124ef565b6002548a5460405160e086901b6001600160e01b031916815260048101949094526001600160401b03909216602484015261ffff8082166044850152600160501b90920463ffffffff16606484015262010000900416608482015260a4016020604051808303816000875af115801561145c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148091906124d6565b90506114b76040518060400160405280601481526020017310985b9ace94dd1bdc9a5b99c81d1a194818995d60621b815250610f48565b6000604051806101000160405280600015158152602001876001600160a01b031681526020018c6001600160a01b031681526020018381526020018481526020014381526020016000815260200185815250905060076000876001600160a01b03166001600160a01b03168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055806006600084815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600201556080820151816003015560a0820151816004015560c0820151816005015560e0820151816006015590505086600001600281819054906101000a90046001600160401b03168092919061164190612518565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050846116a15761168c60405180606001604052806022815260200161257260229139610f48565b6116a16001600160a01b038c16873086611bc9565b6116d16040518060400160405280600f81526020016e10985b9ace94995d1d5c9b8818995d608a1b815250610f48565b600180559a9950505050505050505050565b804710156117335760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610f33565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611780576040519150601f19603f3d011682016040523d82523d6000602084013e611785565b606091505b50509050806117fc5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610f33565b505050565b6000546001600160a01b031633146108f95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610f33565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6118b3611c07565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b611908610f8b565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118e33390565b606061196883836040518060600160405280602781526020016125b860279139611c57565b9392505050565b6001600160a01b03821660009081526007602090815260408083208054825181850281018501909352808352606094938301828280156119ce57602002820191906000526020600020905b8154815260200190600101908083116119ba575b50508351939450505050838110156119e4578093505b6000846001600160401b038111156119fe576119fe61239e565b604051908082528060200260200182016040528015611a3757816020015b611a24611fc5565b815260200190600190039081611a1c5790505b5090508415611b3c576000825b611a4e87856124c3565b811115611b39576006600086611a656001856124c3565b81518110611a7557611a756123b4565b602090810291909101810151825281810192909252604090810160002081516101008082018452825460ff811615158352046001600160a01b03908116948201949094526001820154909316918301919091526002810154606083015260038101546080830152600481015460a0830152600581015460c08301526006015460e08201528351849084908110611b0d57611b0d6123b4565b60200260200101819052508180611b239061242d565b9250508080611b319061253e565b915050611a44565b50505b95945050505050565b6040516001600160a01b0383166024820152604481018290526117fc90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611d34565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611c019085906323b872dd60e01b90608401611b71565b50505050565b600054600160a01b900460ff166108f95760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610f33565b60606001600160a01b0384163b611cbf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610f33565b600080856001600160a01b031685604051611cda9190612555565b600060405180830381855af49150503d8060008114611d15576040519150601f19603f3d011682016040523d82523d6000602084013e611d1a565b606091505b5091509150611d2a828286611e06565b9695505050505050565b6000611d89826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e3f9092919063ffffffff16565b8051909150156117fc5780806020019051810190611da791906124a6565b6117fc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610f33565b60608315611e15575081611968565b825115611e255782518084602001fd5b8160405162461bcd60e51b8152600401610f33919061247c565b6060611e4e8484600085611e56565b949350505050565b606082471015611eb75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610f33565b6001600160a01b0385163b611f0e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610f33565b600080866001600160a01b03168587604051611f2a9190612555565b60006040518083038185875af1925050503d8060008114611f67576040519150601f19603f3d011682016040523d82523d6000602084013e611f6c565b606091505b5091509150611f7c828286611e06565b979650505050505050565b6040518060400160405280611f9a611fc5565b8152602001611fc060405180604001604052806000151581526020016000151581525090565b905290565b60405180610100016040528060001515815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006020828403121561203057600080fd5b5035919050565b6001600160a01b0381168114610f4557600080fd5b60006020828403121561205e57600080fd5b813561196881612037565b8015158114610f4557600080fd5b60008060006060848603121561208c57600080fd5b833561209781612069565b925060208401356120a781612037565b929592945050506040919091013590565b803561ffff811681146120ca57600080fd5b919050565b600080604083850312156120e257600080fd5b82356120ed81612037565b91506120fb602084016120b8565b90509250929050565b60008060006060848603121561211957600080fd5b612122846120b8565b95602085013595506040909401359392505050565b6000806020838503121561214a57600080fd5b82356001600160401b038082111561216157600080fd5b818501915085601f83011261217557600080fd5b81358181111561218457600080fd5b8660208260051b850101111561219957600080fd5b60209290920196919550909350505050565b60005b838110156121c65781810151838201526020016121ae565b50506000910152565b600081518084526121e78160208601602086016121ab565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561225057603f1988860301845261223e8583516121cf565b94509285019290850190600101612222565b5092979650505050505050565b6000806040838503121561227057600080fd5b823561227b81612037565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b828110156123325781518051805115158652878101516001600160a01b0390811689880152878201511687870152606080820151908701526080808201519087015260a0808201519087015260c0808201519087015260e090810151908601528601518051151561010086015260200151151561012085015261014090930192908501906001016122a6565b5091979650505050505050565b6000806040838503121561235257600080fd5b823561235d81612037565b9150602083013563ffffffff8116811461237657600080fd5b809150509250929050565b60006020828403121561239357600080fd5b815161196881612037565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126123e157600080fd5b8301803591506001600160401b038211156123fb57600080fd5b60200191503681900382131561241057600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b60006001820161243f5761243f612417565b5060010190565b80820180821115610b4f57610b4f612417565b60006001600160401b0382168061247257612472612417565b6000190192915050565b60208152600061196860208301846121cf565b8082028115828204841417610b4f57610b4f612417565b6000602082840312156124b857600080fd5b815161196881612069565b81810381811115610b4f57610b4f612417565b6000602082840312156124e857600080fd5b5051919050565b60006020828403121561250157600080fd5b81516001600160401b038116811461196857600080fd5b60006001600160401b0380831681810361253457612534612417565b6001019392505050565b60008161254d5761254d612417565b506000190190565b600082516125678184602087016121ab565b919091019291505056fe42616e6b3a49662045524332302c207472616e736665722074686520746f6b656e73436f696e746f73733a20506c6163696e67207365742074686520666163652076616c7565416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b4b53ec849b542f4dfb10665b8483e2930e2f6d9cdecbefc87dcbb503baada2b64736f6c63430008120033",
  "devdoc": {
    "author": "Romuald Hog (based on Yakitori's Coin Toss)",
    "errors": {
      "InvalidLinkWeiPrice(int256)": [
        {
          "params": {
            "linkWei": "LINK/ETH price returned."
          }
        }
      ],
      "UnderMinBetAmount(uint256)": [
        {
          "params": {
            "minBetAmount": "Bet amount."
          }
        }
      ]
    },
    "events": {
      "AccountOverchargedVRFCost(address,uint256)": {
        "params": {
          "overchargedVRFCost": "Number of tokens overcharged.",
          "user": "Address of the user."
        }
      },
      "BetRefunded(uint256,address,uint256,uint256)": {
        "params": {
          "amount": "Number of tokens refunded.",
          "chainlinkVRFCost": "The Chainlink VRF cost refunded to player.",
          "id": "The bet ID.",
          "user": "Address of the gamer."
        }
      },
      "DistributeOverchargedVRFCost(address,uint256)": {
        "params": {
          "overchargedVRFCost": "Number of tokens refunded.",
          "user": "Address of the user."
        }
      },
      "DistributeTokenVRFFees(address,uint256)": {
        "params": {
          "amount": "Number of tokens refunded.",
          "token": "Address of the token."
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "PlaceBet(uint256,address,address,uint256,uint256,bool)": {
        "params": {
          "amount": "The bet amount.",
          "face": "The chosen coin face.",
          "id": "The bet ID.",
          "token": "Address of the token.",
          "user": "Address of the gamer.",
          "vrfCost": "The Chainlink VRF cost paid by player."
        }
      },
      "Roll(uint256,address,address,uint256,bool,bool,uint256)": {
        "params": {
          "amount": "The bet amount.",
          "face": "The chosen coin face.",
          "id": "The bet ID.",
          "payout": "The payout amount.",
          "rolled": "The rolled coin face.",
          "token": "Address of the token.",
          "user": "Address of the gamer."
        }
      },
      "SetChainlinkConfig(uint16,bytes32,uint256)": {
        "params": {
          "gasAfterCalculation": "Gas to be added for VRF cost refund.",
          "keyHash": "Hash of the public key used to verify the VRF proof.",
          "requestConfirmations": "How many confirmations the Chainlink node should wait before responding."
        }
      },
      "SetHouseEdge(address,uint16)": {
        "params": {
          "houseEdge": "House edge rate.",
          "token": "Address of the token."
        }
      },
      "SetVRFCallbackGasLimit(address,uint32)": {
        "params": {
          "callbackGasLimit": "New Chainlink VRF callback gas limit.",
          "token": "Address of the token."
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "chainlinkCoordinatorAddress for bnb testnet is 0x6a2aad07396b36fe02a22b33cf443582f682c82fLINK_ETH_feedAddress for bnb testnet is 0x351ff08ff5077d6e8704a4763836fe187f074380",
        "params": {
          "LINK_ETH_feedAddress": "Address of the Chainlink LINK/ETH price feed.",
          "bankAddress": "The address of the bank.",
          "chainlinkCoordinatorAddress": "Address of the Chainlink VRF Coordinator."
        }
      },
      "getChainlinkConfig()": {
        "params": {
          "gasAfterCalculation": "Gas to be added for VRF cost refund.",
          "keyHash": "Hash of the public key used to verify the VRF proof.",
          "requestConfirmations": "How many confirmations the Chainlink node should wait before responding."
        }
      },
      "getLastUserBets(address,uint256)": {
        "params": {
          "dataLength": "The amount of bets to return.",
          "user": "Address of the gamer."
        },
        "returns": {
          "_0": "A list of Coin Toss bet."
        }
      },
      "hasPendingBets(address)": {
        "returns": {
          "_0": "Whether the token has pending bets."
        }
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "refundBet(uint256)": {
        "params": {
          "id": "The Bet ID."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setChainlinkConfig(uint16,bytes32,uint256)": {
        "params": {
          "gasAfterCalculation": "Gas to be added for VRF cost refund.",
          "keyHash": "Hash of the public key used to verify the VRF proof.",
          "requestConfirmations": "How many confirmations the Chainlink node should wait before responding."
        }
      },
      "setHouseEdge(address,uint16)": {
        "details": "The house edge rate couldn't exceed 4%.",
        "params": {
          "houseEdge": "House edge rate.",
          "token": "Address of the token."
        }
      },
      "setVRFCallbackGasLimit(address,uint32)": {
        "params": {
          "callbackGasLimit": "How much gas is needed in the Chainlink VRF callback."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "wager(bool,address,uint256)": {
        "params": {
          "face": "The chosen coin face.",
          "token": "Address of the token.",
          "tokenAmount": "The number of tokens bet."
        }
      },
      "withdrawTokensVRFFees(address)": {
        "params": {
          "token": "Address of the token."
        }
      }
    },
    "stateVariables": {
      "coinTossBets": {
        "details": "Coin faces: true = Tails, false = Heads."
      }
    },
    "title": "BetSwirl's Coin Toss game",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AccessDenied()": [
        {
          "notice": "Reverting error when sender isn't allowed."
        }
      ],
      "ExcessiveHouseEdge()": [
        {
          "notice": "House edge is capped at 4%."
        }
      ],
      "ForbiddenToken()": [
        {
          "notice": "Token is not allowed."
        }
      ],
      "InvalidAddress()": [
        {
          "notice": "Reverting error when provided address isn't valid."
        }
      ],
      "InvalidLinkWeiPrice(int256)": [
        {
          "notice": "Chainlink price feed not working"
        }
      ],
      "NoOverchargedVRFCost()": [
        {
          "notice": "No user's overcharged Chainlink fee."
        }
      ],
      "NotFulfilled()": [
        {
          "notice": "Bet isn't resolved yet."
        }
      ],
      "NotPendingBet()": [
        {
          "notice": "Bet provided doesn't exist or was already resolved."
        }
      ],
      "TokenHasPendingBets()": [
        {
          "notice": "Reverting error when token has pending bets."
        }
      ],
      "UnderMinBetAmount(uint256)": [
        {
          "notice": "Insufficient bet amount."
        }
      ],
      "WrongGasValueToCoverFee()": [
        {
          "notice": "The msg.value is not enough to cover Chainlink's fee."
        }
      ]
    },
    "events": {
      "AccountOverchargedVRFCost(address,uint256)": {
        "notice": "Emitted after the overcharged VRF cost amount is accounted."
      },
      "BetRefunded(uint256,address,uint256,uint256)": {
        "notice": "Emitted after the bet amount is transfered to the user."
      },
      "DistributeOverchargedVRFCost(address,uint256)": {
        "notice": "Emitted after the user's overcharged VRF cost amount is transfered."
      },
      "DistributeTokenVRFFees(address,uint256)": {
        "notice": "Emitted after the token's VRF fees amount is transfered to the user."
      },
      "PlaceBet(uint256,address,address,uint256,uint256,bool)": {
        "notice": "Emitted after a bet is placed."
      },
      "Roll(uint256,address,address,uint256,bool,bool,uint256)": {
        "notice": "Emitted after a bet is rolled."
      },
      "SetChainlinkConfig(uint16,bytes32,uint256)": {
        "notice": "Emitted after the Chainlink config is set."
      },
      "SetHouseEdge(address,uint16)": {
        "notice": "Emitted after the house edge is set for a token."
      },
      "SetVRFCallbackGasLimit(address,uint32)": {
        "notice": "Emitted after the Chainlink callback gas limit is set for a token."
      }
    },
    "kind": "user",
    "methods": {
      "bank()": {
        "notice": "The bank that manage to payout a won bet and collect a loss bet."
      },
      "bets(uint256)": {
        "notice": "Maps bets IDs to Bet information."
      },
      "coinTossBets(uint256)": {
        "notice": "Maps bets IDs to chosen and rolled coin faces."
      },
      "constructor": {
        "notice": "Initialize the game base contract."
      },
      "getChainlinkConfig()": {
        "notice": "Returns the Chainlink VRF config."
      },
      "getLastUserBets(address,uint256)": {
        "notice": "Gets the list of the last user bets."
      },
      "hasPendingBets(address)": {
        "notice": "Returns whether the token has pending bets."
      },
      "pause()": {
        "notice": "Pauses the contract to disable new bets."
      },
      "refundBet(uint256)": {
        "notice": "Refunds the bet to the user if the Chainlink VRF callback failed."
      },
      "setChainlinkConfig(uint16,bytes32,uint256)": {
        "notice": "Sets the Chainlink VRF V2 configuration."
      },
      "setHouseEdge(address,uint16)": {
        "notice": "Sets the game house edge rate for a specific token."
      },
      "setVRFCallbackGasLimit(address,uint32)": {
        "notice": "Sets the Chainlink VRF V2 configuration."
      },
      "tokens(address)": {
        "notice": "Maps tokens addresses to token configuration."
      },
      "userOverchargedVRFCost(address)": {
        "notice": "Maps user addresses to VRF overcharged cost."
      },
      "wager(bool,address,uint256)": {
        "notice": "Creates a new bet and stores the chosen coin face."
      },
      "withdrawOverchargedVRFCost(address)": {
        "notice": "Withdraw user's overcharged Chainlink fees."
      },
      "withdrawTokensVRFFees(address)": {
        "notice": "Distributes the token's collected Chainlink fees."
      }
    },
    "notice": "The game is played with a two-sided coin. The game's goal is to guess whether the lucky coin face will be Heads or Tails.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 770,
        "contract": "contracts/games/CoinToss.sol:CoinToss",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 893,
        "contract": "contracts/games/CoinToss.sol:CoinToss",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 994,
        "contract": "contracts/games/CoinToss.sol:CoinToss",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5430,
        "contract": "contracts/games/CoinToss.sol:CoinToss",
        "label": "_chainlinkConfig",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(ChainlinkConfig)5426_storage"
      },
      {
        "astId": 5436,
        "contract": "contracts/games/CoinToss.sol:CoinToss",
        "label": "bets",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Bet)5405_storage)"
      },
      {
        "astId": 5442,
        "contract": "contracts/games/CoinToss.sol:CoinToss",
        "label": "_userBets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5448,
        "contract": "contracts/games/CoinToss.sol:CoinToss",
        "label": "tokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Token)5414_storage)"
      },
      {
        "astId": 5453,
        "contract": "contracts/games/CoinToss.sol:CoinToss",
        "label": "userOverchargedVRFCost",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5039,
        "contract": "contracts/games/CoinToss.sol:CoinToss",
        "label": "coinTossBets",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(CoinTossBet)5033_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)219": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Token)5414_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Game.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)5414_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Bet)5405_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Game.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)5405_storage"
      },
      "t_mapping(t_uint256,t_struct(CoinTossBet)5033_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoinToss.CoinTossBet)",
        "numberOfBytes": "32",
        "value": "t_struct(CoinTossBet)5033_storage"
      },
      "t_struct(Bet)5405_storage": {
        "encoding": "inplace",
        "label": "struct Game.Bet",
        "members": [
          {
            "astId": 5390,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "resolved",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5392,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "user",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5394,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5396,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5398,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5400,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "blockNumber",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5402,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "payout",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5404,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "vrfCost",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(ChainlinkConfig)5426_storage": {
        "encoding": "inplace",
        "label": "struct Game.ChainlinkConfig",
        "members": [
          {
            "astId": 5416,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "requestConfirmations",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5418,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "numRandomWords",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5420,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "keyHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 5423,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "COORDINATOR",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(VRFCoordinatorV2Interface)219"
          },
          {
            "astId": 5425,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "gasAfterCalculation",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(CoinTossBet)5033_storage": {
        "encoding": "inplace",
        "label": "struct CoinToss.CoinTossBet",
        "members": [
          {
            "astId": 5030,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "face",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5032,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "rolled",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Token)5414_storage": {
        "encoding": "inplace",
        "label": "struct Game.Token",
        "members": [
          {
            "astId": 5407,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "houseEdge",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5409,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "pendingCount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5411,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "VRFCallbackGasLimit",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5413,
            "contract": "contracts/games/CoinToss.sol:CoinToss",
            "label": "VRFFees",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}