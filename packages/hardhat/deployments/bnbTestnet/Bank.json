{
  "address": "0xF48a7416D114212B49629730b93048C460bE0dcC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "teamWalletAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenHasPendingBets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "splitSum",
          "type": "uint16"
        }
      ],
      "name": "WrongHouseEdgeSplit",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "AddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bank",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dividend",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partner",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "treasury",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "team",
          "type": "uint256"
        }
      ],
      "name": "AllocateHouseEdgeAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CashIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "HarvestDividend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "treasuryAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "teamAmount",
          "type": "uint256"
        }
      ],
      "name": "HouseEdgeDistribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partnerAmount",
          "type": "uint256"
        }
      ],
      "name": "HouseEdgePartnerDistribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        }
      ],
      "name": "Payout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "SetAllowedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "balanceRisk",
          "type": "uint16"
        }
      ],
      "name": "SetBalanceRisk",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minHouseEdgeWithdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "SetMinHouseEdgeWithdrawAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "SetPausedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "teamWallet",
          "type": "address"
        }
      ],
      "name": "SetTeamWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bank",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "dividend",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "partner",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "treasury",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "team",
          "type": "uint16"
        }
      ],
      "name": "SetTokenHouseEdgeSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBetAmount",
          "type": "uint256"
        }
      ],
      "name": "SetTokenMinBetAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "partner",
          "type": "address"
        }
      ],
      "name": "SetTokenPartner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        }
      ],
      "name": "SetTokenVRFSubId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAME_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HARVESTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "cashIn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "getMaxBetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getMinBetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minBetAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "allowed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "paused",
                  "type": "bool"
                },
                {
                  "internalType": "uint16",
                  "name": "balanceRisk",
                  "type": "uint16"
                },
                {
                  "internalType": "uint64",
                  "name": "VRFSubId",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "partner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "minBetAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minHouseEdgeWithdrawAmount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "bank",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "dividend",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "partner",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "treasury",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "team",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint256",
                      "name": "dividendAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "partnerAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "treasuryAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "teamAmount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Bank.HouseEdgeSplit",
                  "name": "houseEdgeSplit",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Bank.Token",
              "name": "token",
              "type": "tuple"
            }
          ],
          "internalType": "struct Bank.TokenMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getVRFSubId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestDividends",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "isAllowedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "payout",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setAllowedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "balanceRisk",
          "type": "uint16"
        }
      ],
      "name": "setBalanceRisk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bank",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "dividend",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "partner",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_treasury",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "team",
          "type": "uint16"
        }
      ],
      "name": "setHouseEdgeSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minHouseEdgeWithdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinHouseEdgeWithdrawAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "setPausedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamWallet",
          "type": "address"
        }
      ],
      "name": "setTeamWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenMinBetAmount",
          "type": "uint256"
        }
      ],
      "name": "setTokenMinBetAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "partner",
          "type": "address"
        }
      ],
      "name": "setTokenPartner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        }
      ],
      "name": "setTokenVRFSubId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "balanceRisk",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "VRFSubId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "partner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minBetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minHouseEdgeWithdrawAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "bank",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "dividend",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "partner",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "treasury",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "team",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "dividendAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "partnerAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "treasuryAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "teamAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Bank.HouseEdgeSplit",
          "name": "houseEdgeSplit",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdrawHouseEdgeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdrawPartnerAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3cdd4c8694b702134ee191768a4e2ada922149903dd27b35680ba7040e7992ff",
  "receipt": {
    "to": null,
    "from": "0x766a5882B53bAF0EFa8F7c99Fe4944A8C7c1102c",
    "contractAddress": "0xF48a7416D114212B49629730b93048C460bE0dcC",
    "transactionIndex": 5,
    "gasUsed": "3499872",
    "logsBloom": "0x
    "blockHash": "0x81f312cab37542d1550e75366a861e71c4538cf6f8091a12c61d5042184bb623",
    "transactionHash": "0x3cdd4c8694b702134ee191768a4e2ada922149903dd27b35680ba7040e7992ff",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 27496490,
        "transactionHash": "0x3cdd4c8694b702134ee191768a4e2ada922149903dd27b35680ba7040e7992ff",
        "address": "0xF48a7416D114212B49629730b93048C460bE0dcC",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000766a5882b53baf0efa8f7c99fe4944a8c7c1102c",
          "0x000000000000000000000000766a5882b53baf0efa8f7c99fe4944a8c7c1102c"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x81f312cab37542d1550e75366a861e71c4538cf6f8091a12c61d5042184bb623"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 27496490,
        "transactionHash": "0x3cdd4c8694b702134ee191768a4e2ada922149903dd27b35680ba7040e7992ff",
        "address": "0xF48a7416D114212B49629730b93048C460bE0dcC",
        "topics": [
          "0xc6a5dd316fe9d0339f2769deab7e31f64c8f5b101ffd85dfc9a83dbeaf2e69da"
        ],
        "data": "0x000000000000000000000000b6a2f9b8fd10e7afbac15b3db96828b018a909d7",
        "logIndex": 2,
        "blockHash": "0x81f312cab37542d1550e75366a861e71c4538cf6f8091a12c61d5042184bb623"
      }
    ],
    "blockNumber": 27496490,
    "cumulativeGasUsed": "3658100",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc627Cbc4027E1B2C392Cd4FD204dbD55483561f2",
    "0xb6A2f9b8fd10E7AfBac15b3DB96828B018A909d7"
  ],
  "solcInputHash": "ce7a40fa501889c21d564559156935d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHasPendingBets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"splitSum\",\"type\":\"uint16\"}],\"name\":\"WrongHouseEdgeSplit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bank\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dividend\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partner\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"AllocateHouseEdgeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CashIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HarvestDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"name\":\"HouseEdgeDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerAmount\",\"type\":\"uint256\"}],\"name\":\"HouseEdgePartnerDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"SetAllowedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"balanceRisk\",\"type\":\"uint16\"}],\"name\":\"SetBalanceRisk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minHouseEdgeWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"SetMinHouseEdgeWithdrawAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetPausedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"}],\"name\":\"SetTeamWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bank\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"dividend\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"partner\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"}],\"name\":\"SetTokenHouseEdgeSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"}],\"name\":\"SetTokenMinBetAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"SetTokenPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"SetTokenVRFSubId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAME_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HARVESTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"cashIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"getMaxBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMinBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"balanceRisk\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"VRFSubId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHouseEdgeWithdrawAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"bank\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dividend\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"partner\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dividendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Bank.HouseEdgeSplit\",\"name\":\"houseEdgeSplit\",\"type\":\"tuple\"}],\"internalType\":\"struct Bank.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"internalType\":\"struct Bank.TokenMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getVRFSubId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"balanceRisk\",\"type\":\"uint16\"}],\"name\":\"setBalanceRisk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bank\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dividend\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"partner\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"}],\"name\":\"setHouseEdgeSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minHouseEdgeWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"setMinHouseEdgeWithdrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPausedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamWallet\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMinBetAmount\",\"type\":\"uint256\"}],\"name\":\"setTokenMinBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"setTokenPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"setTokenVRFSubId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"balanceRisk\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"VRFSubId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHouseEdgeWithdrawAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"bank\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dividend\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"partner\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dividendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Bank.HouseEdgeSplit\",\"name\":\"houseEdgeSplit\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawHouseEdgeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawPartnerAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Romuald Hog\",\"details\":\"All rates are in basis point.\",\"errors\":{\"WrongHouseEdgeSplit(uint16)\":[{\"params\":{\"splitSum\":\"Sum of the house edge allocations rates.\"}}]},\"events\":{\"AddToken(address)\":{\"params\":{\"token\":\"Address of the token.\"}},\"AllocateHouseEdgeAmount(address,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"bank\":\"The number of tokens allocated to bank.\",\"dividend\":\"The number of tokens allocated as staking rewards.\",\"partner\":\"The number of tokens allocated to the partner.\",\"team\":\"The number of tokens allocated to the team.\",\"token\":\"Address of the token.\",\"treasury\":\"The number of tokens allocated to the treasury.\"}},\"CashIn(address,uint256,uint256)\":{\"params\":{\"amount\":\"Bet amount collected.\",\"newBalance\":\"New token balance.\",\"token\":\"Address of the token.\"}},\"Deposit(address,uint256)\":{\"params\":{\"amount\":\"The number of token deposited.\",\"token\":\"Address of the token.\"}},\"HarvestDividend(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens sent to the Harvester.\",\"token\":\"Address of the token.\"}},\"HouseEdgeDistribution(address,uint256,uint256)\":{\"params\":{\"teamAmount\":\"The number of tokens sent to the team.\",\"token\":\"Address of the token.\",\"treasuryAmount\":\"The number of tokens sent to the treasury.\"}},\"HouseEdgePartnerDistribution(address,uint256)\":{\"params\":{\"partnerAmount\":\"The number of tokens sent to the partner.\",\"token\":\"Address of the token.\"}},\"Payout(address,uint256,uint256)\":{\"params\":{\"newBalance\":\"New token balance.\",\"profit\":\"Bet profit amount sent.\",\"token\":\"Address of the token.\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"SetAllowedToken(address,bool)\":{\"params\":{\"allowed\":\"Whether the token is allowed for betting.\",\"token\":\"Address of the token.\"}},\"SetBalanceRisk(address,uint16)\":{\"params\":{\"balanceRisk\":\"Rate defining the balance risk.\"}},\"SetMinHouseEdgeWithdrawAmount(address,uint256)\":{\"params\":{\"minHouseEdgeWithdrawAmount\":\"Minimum amount of token to allow transfer.\",\"token\":\"Address of the token.\"}},\"SetPausedToken(address,bool)\":{\"params\":{\"paused\":\"Whether the token is paused for betting.\",\"token\":\"Address of the token.\"}},\"SetTeamWallet(address)\":{\"params\":{\"teamWallet\":\"The team wallet address.\"}},\"SetTokenHouseEdgeSplit(address,uint16,uint16,uint16,uint16,uint16)\":{\"params\":{\"bank\":\"Rate to be allocated to the bank, on bet payout.\",\"dividend\":\"Rate to be allocated as staking rewards, on bet payout.\",\"partner\":\"Rate to be allocated to the partner, on bet payout.\",\"team\":\"Rate to be allocated to the team, on bet payout.\",\"token\":\"Address of the token.\",\"treasury\":\"Rate to be allocated to the treasury, on bet payout.\"}},\"SetTokenMinBetAmount(address,uint256)\":{\"params\":{\"minBetAmount\":\"Minimum bet amount.\",\"token\":\"Address of the token.\"}},\"SetTokenPartner(address,address)\":{\"params\":{\"partner\":\"Address of the partner.\",\"token\":\"Address of the token.\"}},\"SetTokenVRFSubId(address,uint64)\":{\"params\":{\"subId\":\"Subscription ID.\",\"token\":\"Address of the token.\"}},\"Withdraw(address,uint256)\":{\"params\":{\"amount\":\"The number of token withdrawn.\",\"token\":\"Address of the token.\"}}},\"kind\":\"dev\",\"methods\":{\"addToken(address)\":{\"params\":{\"token\":\"Address of the token.\"}},\"cashIn(address,uint256,uint256)\":{\"details\":\"In case of an ERC20, the bet amount should be transfered prior to this tx.In case of the gas token, the bet amount is sent along with this tx.\",\"params\":{\"amount\":\"Loss bet amount.\",\"fees\":\"Bet amount and bet profit fees amount.\",\"tokenAddress\":\"Address of the token.\"}},\"checkUpkeep(bytes)\":{\"details\":\"`checkData` and `performData` are encoded with types (uint8, address).\",\"params\":{\"checkData\":\"Fixed and specified at Upkeep registration.\"},\"returns\":{\"performData\":\"Bytes that will be used as input parameter when calling performUpkeep.\",\"upkeepNeeded\":\"Boolean that when True will trigger the on-chain performUpkeep call.\"}},\"constructor\":{\"params\":{\"teamWalletAddress\":\"Team wallet.\",\"treasuryAddress\":\"Treasury multi-sig wallet.\"}},\"deposit(address,uint256)\":{\"params\":{\"amount\":\"Number of tokens.\",\"token\":\"Address of the token.\"}},\"getBalance(address)\":{\"params\":{\"token\":\"Address of the token.\"},\"returns\":{\"_0\":\"The amount of token available for profits.\"}},\"getMaxBetAmount(address,uint256)\":{\"details\":\"The multiplier should be at least 10000.\",\"params\":{\"multiplier\":\"The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\",\"token\":\"Address of the token.\"},\"returns\":{\"_0\":\"Maximum bet amount for the token.\"}},\"getMinBetAmount(address)\":{\"details\":\"The min bet amount should be at least 10000 cause of the `getMaxBetAmount` calculation.\",\"params\":{\"token\":\"Address of the token.\"},\"returns\":{\"minBetAmount\":\"Min bet amount.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getTokenOwner(address)\":{\"params\":{\"token\":\"Address of the token.\"},\"returns\":{\"_0\":\"Address of the owner.\"}},\"getTokens()\":{\"details\":\"For the front-end\"},\"getVRFSubId(address)\":{\"params\":{\"token\":\"Address of the token.\"},\"returns\":{\"_0\":\"Chainlink VRF v2 Subscription ID.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAllowedToken(address)\":{\"params\":{\"tokenAddress\":\"Address of the token.\"},\"returns\":{\"_0\":\"Whether the token is enabled for bets.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"payout(address,address,uint256,uint256)\":{\"params\":{\"fees\":\"Bet amount and bet profit fees amount.\",\"profit\":\"Number of tokens to be sent to the gamer.\",\"token\":\"Address of the token.\",\"user\":\"Address of the gamer.\"}},\"performUpkeep(bytes)\":{\"params\":{\"performData\":\"Data which was passed back from `checkUpkeep`.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAllowedToken(address,bool)\":{\"params\":{\"allowed\":\"Whether the token is enabled for bets.\",\"token\":\"Address of the token.\"}},\"setBalanceRisk(address,uint16)\":{\"params\":{\"balanceRisk\":\"Risk rate.\",\"token\":\"Address of the token.\"}},\"setHouseEdgeSplit(address,uint16,uint16,uint16,uint16,uint16)\":{\"details\":\"`bank`, `dividend`, `_treasury` and `team` rates sum must equals 10000.\",\"params\":{\"_treasury\":\"Rate to be allocated to the treasury, on bet payout.\",\"bank\":\"Rate to be allocated to the bank, on bet payout.\",\"dividend\":\"Rate to be allocated as staking rewards, on bet payout.\",\"partner\":\"Rate to be allocated to the partner, on bet payout.\",\"team\":\"Rate to be allocated to the team, on bet payout.\",\"token\":\"Address of the token.\"}},\"setMinHouseEdgeWithdrawAmount(address,uint256)\":{\"params\":{\"minHouseEdgeWithdrawAmount\":\"Minimum amount of token to allow transfer.\",\"token\":\"Address of the token.\"}},\"setPausedToken(address,bool)\":{\"params\":{\"paused\":\"Whether the token is paused.\",\"token\":\"Address of the token.\"}},\"setTeamWallet(address)\":{\"params\":{\"_teamWallet\":\"The team wallet address.\"}},\"setTokenMinBetAmount(address,uint256)\":{\"params\":{\"token\":\"Address of the token.\",\"tokenMinBetAmount\":\"Minimum bet amount.\"}},\"setTokenPartner(address,address)\":{\"params\":{\"partner\":\"Address of the partner.\",\"token\":\"Address of the token.\"}},\"setTokenVRFSubId(address,uint64)\":{\"params\":{\"subId\":\"Subscription ID.\",\"token\":\"Address of the token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"Number of tokens.\",\"token\":\"Address of the token.\"}},\"withdrawHouseEdgeAmount(address)\":{\"params\":{\"tokenAddress\":\"Address of the token.\"}},\"withdrawPartnerAmount(address)\":{\"params\":{\"tokenAddress\":\"Address of the token.\"}}},\"title\":\"BetSwirl's Bank\",\"version\":1},\"userdoc\":{\"errors\":{\"AccessDenied()\":[{\"notice\":\"Reverting error when sender isn't allowed.\"}],\"TokenExists()\":[{\"notice\":\"Reverting error when trying to add an existing token.\"}],\"TokenHasPendingBets()\":[{\"notice\":\"Reverting error when token has pending bets on a game.\"}],\"TokenNotPaused()\":[{\"notice\":\"Reverting error when withdrawing a non paused token.\"}],\"WrongAddress()\":[{\"notice\":\"Reverting error when team wallet or treasury is the zero address.\"}],\"WrongHouseEdgeSplit(uint16)\":[{\"notice\":\"Reverting error when setting the house edge allocations, but the sum isn't 100%.\"}]},\"events\":{\"AddToken(address)\":{\"notice\":\"Emitted after a token is added.\"},\"AllocateHouseEdgeAmount(address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted after the token's house edge is allocated.\"},\"CashIn(address,uint256,uint256)\":{\"notice\":\"Emitted after the bet amount is collected from the game smart contract.\"},\"Deposit(address,uint256)\":{\"notice\":\"Emitted after a token deposit.\"},\"HarvestDividend(address,uint256)\":{\"notice\":\"Emitted after the token's dividend allocation is distributed.\"},\"HouseEdgeDistribution(address,uint256,uint256)\":{\"notice\":\"Emitted after the token's treasury and team allocations are distributed.\"},\"HouseEdgePartnerDistribution(address,uint256)\":{\"notice\":\"Emitted after the token's partner allocation is distributed.\"},\"Payout(address,uint256,uint256)\":{\"notice\":\"Emitted after the bet profit amount is sent to the user.\"},\"SetAllowedToken(address,bool)\":{\"notice\":\"Emitted after a token is allowed.\"},\"SetBalanceRisk(address,uint16)\":{\"notice\":\"Emitted after the balance risk is set.\"},\"SetMinHouseEdgeWithdrawAmount(address,uint256)\":{\"notice\":\"Emitted after the Upkeep minimum transfer amount is set.\"},\"SetPausedToken(address,bool)\":{\"notice\":\"Emitted after a token is paused.\"},\"SetTeamWallet(address)\":{\"notice\":\"Emitted after the team wallet is set.\"},\"SetTokenHouseEdgeSplit(address,uint16,uint16,uint16,uint16,uint16)\":{\"notice\":\"Emitted after the token's house edge allocations for bet payout is set.\"},\"SetTokenMinBetAmount(address,uint256)\":{\"notice\":\"Emitted after the minimum bet amount is set for a token.\"},\"SetTokenPartner(address,address)\":{\"notice\":\"Emitted after a token partner is set.\"},\"SetTokenVRFSubId(address,uint64)\":{\"notice\":\"Emitted after the token's VRF subscription ID is set.\"},\"Withdraw(address,uint256)\":{\"notice\":\"Emitted after a token withdrawal.\"}},\"kind\":\"user\",\"methods\":{\"GAME_ROLE()\":{\"notice\":\"Role associated to Games smart contracts.\"},\"HARVESTER_ROLE()\":{\"notice\":\"Role associated to harvester smart contract.\"},\"addToken(address)\":{\"notice\":\"Adds a new token that'll be enabled for the games' betting. Token shouldn't exist yet.\"},\"cashIn(address,uint256,uint256)\":{\"notice\":\"Accounts a loss bet.\"},\"checkUpkeep(bytes)\":{\"notice\":\"Runs by Chainlink Keepers at every block to determine if `performUpkeep` should be called.\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit funds in the bank to allow gamers to win more. ERC20 token allowance should be given prior to deposit.\"},\"getBalance(address)\":{\"notice\":\"Gets the token's balance. The token's house edge allocation amounts are subtracted from the balance.\"},\"getMaxBetAmount(address,uint256)\":{\"notice\":\"Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\"},\"getMinBetAmount(address)\":{\"notice\":\"Gets the token's min bet amount.\"},\"getTokenOwner(address)\":{\"notice\":\"Gets the token's owner.\"},\"getVRFSubId(address)\":{\"notice\":\"Gets the token's Chainlink VRF v2 Subscription ID.\"},\"harvestDividends()\":{\"notice\":\"Harvests tokens dividends.\"},\"isAllowedToken(address)\":{\"notice\":\"Gets the token's allow status used on the games smart contracts.\"},\"payout(address,address,uint256,uint256)\":{\"notice\":\"Payouts a winning bet, and allocate the house edge fee.\"},\"performUpkeep(bytes)\":{\"notice\":\"Executed by Chainlink Keepers when `upkeepNeeded` is true.\"},\"setAllowedToken(address,bool)\":{\"notice\":\"Changes the token's bet permission.\"},\"setBalanceRisk(address,uint16)\":{\"notice\":\"Sets the new token balance risk.\"},\"setHouseEdgeSplit(address,uint16,uint16,uint16,uint16,uint16)\":{\"notice\":\"Sets the token's house edge allocations for bet payout.\"},\"setMinHouseEdgeWithdrawAmount(address,uint256)\":{\"notice\":\"Changes the token's Upkeep min transfer amount.\"},\"setPausedToken(address,bool)\":{\"notice\":\"Changes the token's paused status.\"},\"setTeamWallet(address)\":{\"notice\":\"Sets the new team wallet.\"},\"setTokenMinBetAmount(address,uint256)\":{\"notice\":\"Sets the minimum bet amount for a specific token.\"},\"setTokenPartner(address,address)\":{\"notice\":\"Changes the token's partner address. It withdraw the available balance, the partner allocation, and the games' VRF fees.\"},\"setTokenVRFSubId(address,uint64)\":{\"notice\":\"Sets the Chainlink VRF subscription ID for a specific token.\"},\"teamWallet()\":{\"notice\":\"Team wallet.\"},\"tokens(address)\":{\"notice\":\"Maps tokens addresses to token configuration.\"},\"treasury()\":{\"notice\":\"Treasury multi-sig wallet.\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw funds from the bank. Token has to be paused and no pending bet resolution on games.\"},\"withdrawHouseEdgeAmount(address)\":{\"notice\":\"Distributes the token's treasury and team allocations amounts.\"},\"withdrawPartnerAmount(address)\":{\"notice\":\"Distributes the token's partner amount.\"}},\"notice\":\"The Bank contract holds the casino's funds, whitelist the games betting tokens, define the max bet amount based on a risk, payout the bet profit to user and collect the loss bet amount from the game's contract, split and allocate the house edge taken from each bet (won or loss). The admin role is transfered to a Timelock that execute administrative tasks, only the Games could payout the bet profit from the bank, and send the loss bet amount to the bank.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bank/Bank.sol\":\"Bank\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatible directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatible as KeeperCompatible} from \\\"./AutomationCompatible.sol\\\";\\nimport {AutomationBase as KeeperBase} from \\\"./AutomationBase.sol\\\";\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xa5f26a85ab9a927016e27af9f1ec33f878c28d8f06cb611e7fb2e189a5336a43\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x35e30a35e23f856cbcee3558b7efdd83f6017a8f1b419710645143d98e892463\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/bank/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport {AccessControlEnumerable} from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC20Metadata, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Multicall} from \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\n\\nimport {KeeperCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IGame {\\n    function hasPendingBets(address token) external view returns (bool);\\n\\n    function withdrawTokensVRFFees(address token) external;\\n}\\n\\n\\n/// @title BetSwirl's Bank\\n/// @author Romuald Hog\\n/// @notice The Bank contract holds the casino's funds,\\n/// whitelist the games betting tokens,\\n/// define the max bet amount based on a risk,\\n/// payout the bet profit to user and collect the loss bet amount from the game's contract,\\n/// split and allocate the house edge taken from each bet (won or loss).\\n/// The admin role is transfered to a Timelock that execute administrative tasks,\\n/// only the Games could payout the bet profit from the bank, and send the loss bet amount to the bank.\\n/// @dev All rates are in basis point.\\ncontract Bank is AccessControlEnumerable, KeeperCompatibleInterface, Multicall {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Enum to identify the Chainlink Upkeep registration.\\n    enum UpkeepActions {\\n        DistributePartnerHouseEdge,\\n        DistributeOwnHouseEdge\\n    }\\n\\n    /// @notice Token's house edge allocations struct.\\n    /// The games house edge is split into several allocations.\\n    /// The allocated amounts stays in the bank until authorized parties withdraw. They are subtracted from the balance.\\n    /// @param bank Rate to be allocated to the bank, on bet payout.\\n    /// @param dividend Rate to be allocated as staking rewards, on bet payout.\\n    /// @param partner Rate to be allocated to the partner, on bet payout.\\n    /// @param treasury Rate to be allocated to the treasury, on bet payout.\\n    /// @param team Rate to be allocated to the team, on bet payout.\\n    /// @param dividendAmount The number of tokens to be sent as staking rewards.\\n    /// @param partnerAmount The number of tokens to be sent to the partner.\\n    /// @param treasuryAmount The number of tokens to be sent to the treasury.\\n    /// @param teamAmount The number of tokens to be sent to the team.\\n    struct HouseEdgeSplit {\\n        uint16 bank;\\n        uint16 dividend;\\n        uint16 partner;\\n        uint16 treasury;\\n        uint16 team;\\n        uint256 dividendAmount;\\n        uint256 partnerAmount;\\n        uint256 treasuryAmount;\\n        uint256 teamAmount;\\n    }\\n\\n    /// @notice Token struct.\\n    /// List of tokens to bet on games.\\n    /// @param allowed Whether the token is allowed for bets.\\n    /// @param paused Whether the token is paused for bets.\\n    /// @param balanceRisk Defines the maximum bank payout, used to calculate the max bet amount.\\n    /// @param VRFSubId Chainlink VRF v2 subscription ID.\\n    /// @param partner Address of the partner to manage the token and receive the house edge.\\n    /// @param minBetAmount Minimum bet amount.\\n    /// @param minHouseEdgeWithdrawAmount The minimum amount of token to trigger the distribution of the house edge.\\n    /// @param houseEdgeSplit House edge allocations.\\n    struct Token {\\n        bool allowed;\\n        bool paused;\\n        uint16 balanceRisk;\\n        uint64 VRFSubId;\\n        address partner;\\n        uint256 minBetAmount;\\n        uint256 minHouseEdgeWithdrawAmount;\\n        HouseEdgeSplit houseEdgeSplit;\\n    }\\n\\n    /// @notice Token's metadata struct. It contains additional information from the ERC20 token.\\n    /// @dev Only used on the `getTokens` getter for the front-end.\\n    /// @param decimals Number of token's decimals.\\n    /// @param tokenAddress Contract address of the token.\\n    /// @param name Name of the token.\\n    /// @param symbol Symbol of the token.\\n    /// @param token Token data.\\n    struct TokenMetadata {\\n        uint8 decimals;\\n        address tokenAddress;\\n        string name;\\n        string symbol;\\n        Token token;\\n    }\\n\\n    /// @notice Number of tokens added.\\n    uint8 private _tokensCount;\\n\\n    /// @notice Treasury multi-sig wallet.\\n    address public immutable treasury;\\n\\n    /// @notice Team wallet.\\n    address public teamWallet;\\n\\n    /// @notice Role associated to Games smart contracts.\\n    bytes32 public constant GAME_ROLE = keccak256(\\\"GAME_ROLE\\\");\\n\\n    /// @notice Role associated to harvester smart contract.\\n    bytes32 public constant HARVESTER_ROLE = keccak256(\\\"HARVESTER_ROLE\\\");\\n\\n    /// @notice Maps tokens addresses to token configuration.\\n    mapping(address => Token) public tokens;\\n\\n    /// @notice Maps tokens indexes to token address.\\n    mapping(uint8 => address) private _tokensList;\\n\\n    /// @notice Emitted after the team wallet is set.\\n    /// @param teamWallet The team wallet address.\\n    event SetTeamWallet(address teamWallet);\\n\\n    /// @notice Emitted after a token is added.\\n    /// @param token Address of the token.\\n    event AddToken(address token);\\n\\n    /// @notice Emitted after the balance risk is set.\\n    /// @param balanceRisk Rate defining the balance risk.\\n    event SetBalanceRisk(address indexed token, uint16 balanceRisk);\\n\\n    /// @notice Emitted after a token is allowed.\\n    /// @param token Address of the token.\\n    /// @param allowed Whether the token is allowed for betting.\\n    event SetAllowedToken(address indexed token, bool allowed);\\n\\n    /// @notice Emitted after the minimum bet amount is set for a token.\\n    /// @param token Address of the token.\\n    /// @param minBetAmount Minimum bet amount.\\n    event SetTokenMinBetAmount(address indexed token, uint256 minBetAmount);\\n\\n    /// @notice Emitted after the token's VRF subscription ID is set.\\n    /// @param token Address of the token.\\n    /// @param subId Subscription ID.\\n    event SetTokenVRFSubId(address indexed token, uint64 subId);\\n\\n    /// @notice Emitted after a token is paused.\\n    /// @param token Address of the token.\\n    /// @param paused Whether the token is paused for betting.\\n    event SetPausedToken(address indexed token, bool paused);\\n\\n    /// @notice Emitted after the Upkeep minimum transfer amount is set.\\n    /// @param token Address of the token.\\n    /// @param minHouseEdgeWithdrawAmount Minimum amount of token to allow transfer.\\n    event SetMinHouseEdgeWithdrawAmount(\\n        address indexed token,\\n        uint256 minHouseEdgeWithdrawAmount\\n    );\\n\\n    /// @notice Emitted after a token partner is set.\\n    /// @param token Address of the token.\\n    /// @param partner Address of the partner.\\n    event SetTokenPartner(address indexed token, address partner);\\n\\n    /// @notice Emitted after a token deposit.\\n    /// @param token Address of the token.\\n    /// @param amount The number of token deposited.\\n    event Deposit(address indexed token, uint256 amount);\\n\\n    /// @notice Emitted after a token withdrawal.\\n    /// @param token Address of the token.\\n    /// @param amount The number of token withdrawn.\\n    event Withdraw(address indexed token, uint256 amount);\\n\\n    /// @notice Emitted after the token's house edge allocations for bet payout is set.\\n    /// @param token Address of the token.\\n    /// @param bank Rate to be allocated to the bank, on bet payout.\\n    /// @param dividend Rate to be allocated as staking rewards, on bet payout.\\n    /// @param partner Rate to be allocated to the partner, on bet payout.\\n    /// @param treasury Rate to be allocated to the treasury, on bet payout.\\n    /// @param team Rate to be allocated to the team, on bet payout.\\n    event SetTokenHouseEdgeSplit(\\n        address indexed token,\\n        uint16 bank,\\n        uint16 dividend,\\n        uint16 partner,\\n        uint16 treasury,\\n        uint16 team\\n    );\\n\\n    /// @notice Emitted after the token's treasury and team allocations are distributed.\\n    /// @param token Address of the token.\\n    /// @param treasuryAmount The number of tokens sent to the treasury.\\n    /// @param teamAmount The number of tokens sent to the team.\\n    event HouseEdgeDistribution(\\n        address indexed token,\\n        uint256 treasuryAmount,\\n        uint256 teamAmount\\n    );\\n    /// @notice Emitted after the token's partner allocation is distributed.\\n    /// @param token Address of the token.\\n    /// @param partnerAmount The number of tokens sent to the partner.\\n    event HouseEdgePartnerDistribution(\\n        address indexed token,\\n        uint256 partnerAmount\\n    );\\n\\n    /// @notice Emitted after the token's dividend allocation is distributed.\\n    /// @param token Address of the token.\\n    /// @param amount The number of tokens sent to the Harvester.\\n    event HarvestDividend(address indexed token, uint256 amount);\\n\\n    /// @notice Emitted after the token's house edge is allocated.\\n    /// @param token Address of the token.\\n    /// @param bank The number of tokens allocated to bank.\\n    /// @param dividend The number of tokens allocated as staking rewards.\\n    /// @param partner The number of tokens allocated to the partner.\\n    /// @param treasury The number of tokens allocated to the treasury.\\n    /// @param team The number of tokens allocated to the team.\\n    event AllocateHouseEdgeAmount(\\n        address indexed token,\\n        uint256 bank,\\n        uint256 dividend,\\n        uint256 partner,\\n        uint256 treasury,\\n        uint256 team\\n    );\\n\\n    /// @notice Emitted after the bet profit amount is sent to the user.\\n    /// @param token Address of the token.\\n    /// @param newBalance New token balance.\\n    /// @param profit Bet profit amount sent.\\n    event Payout(address indexed token, uint256 newBalance, uint256 profit);\\n\\n    /// @notice Emitted after the bet amount is collected from the game smart contract.\\n    /// @param token Address of the token.\\n    /// @param newBalance New token balance.\\n    /// @param amount Bet amount collected.\\n    event CashIn(address indexed token, uint256 newBalance, uint256 amount);\\n\\n    /// @notice Reverting error when trying to add an existing token.\\n    error TokenExists();\\n    /// @notice Reverting error when setting the house edge allocations, but the sum isn't 100%.\\n    /// @param splitSum Sum of the house edge allocations rates.\\n    error WrongHouseEdgeSplit(uint16 splitSum);\\n    /// @notice Reverting error when sender isn't allowed.\\n    error AccessDenied();\\n    /// @notice Reverting error when team wallet or treasury is the zero address.\\n    error WrongAddress();\\n    /// @notice Reverting error when withdrawing a non paused token.\\n    error TokenNotPaused();\\n    /// @notice Reverting error when token has pending bets on a game.\\n    error TokenHasPendingBets();\\n\\n    /// @notice Modifier that checks that an account is allowed to interact with a token.\\n    /// @param role The required role.\\n    /// @param token The token address.\\n    modifier onlyTokenOwner(bytes32 role, address token) {\\n        address partner = tokens[token].partner;\\n        if (partner == address(0)) {\\n            _checkRole(role, msg.sender);\\n        } else if (msg.sender != partner) {\\n            revert AccessDenied();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Initialize the contract's admin role to the deployer, and state variables.\\n    //  @dev treasuryAddress for us is: 0xc627Cbc4027E1B2C392Cd4FD204dbD55483561f2\\n    //  @dev teamWalletAddress for us is: 0xb6A2f9b8fd10E7AfBac15b3DB96828B018A909d7\\n    /// @param treasuryAddress Treasury multi-sig wallet.\\n    /// @param teamWalletAddress Team wallet.\\n    constructor(address treasuryAddress, address teamWalletAddress) {\\n        if (treasuryAddress == address(0)) {\\n            revert WrongAddress();\\n        }\\n\\n        treasury = treasuryAddress;\\n\\n        // The ownership should then be transfered to a multi-sig.\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        setTeamWallet(teamWalletAddress);\\n    }\\n\\n    /// @notice Transfers a specific amount of token to an address.\\n    /// Uses native transfer or ERC20 transfer depending on the token.\\n    /// @dev The 0x address is considered the gas token.\\n    /// @param user Address of destination.\\n    /// @param token Address of the token.\\n    /// @param amount Number of tokens.\\n    function _safeTransfer(\\n        address user,\\n        address token,\\n        uint256 amount\\n    ) private {\\n        if (_isGasToken(token)) {\\n            Address.sendValue(payable(user), amount);\\n        } else {\\n            IERC20(token).safeTransfer(user, amount);\\n        }\\n    }\\n\\n    /// @notice Check if the token has the 0x address.\\n    /// @param token Address of the token.\\n    /// @return Whether the token's address is the 0x address.\\n    function _isGasToken(address token) private pure returns (bool) {\\n        return token == address(0);\\n    }\\n\\n    /// @notice Deposit funds in the bank to allow gamers to win more.\\n    /// ERC20 token allowance should be given prior to deposit.\\n    /// @param token Address of the token.\\n    /// @param amount Number of tokens.\\n    function deposit(address token, uint256 amount)\\n        external\\n        payable\\n        onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\\n    {\\n        if (_isGasToken(token)) {\\n            amount = msg.value;\\n        } else {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n        emit Deposit(token, amount);\\n    }\\n\\n    /// @notice Withdraw funds from the bank. Token has to be paused and no pending bet resolution on games.\\n    /// @param token Address of the token.\\n    /// @param amount Number of tokens.\\n    function withdraw(address token, uint256 amount)\\n        public\\n        onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\\n    {\\n        uint256 balance = getBalance(token);\\n        if (balance != 0) {\\n            if (!tokens[token].paused) {\\n                revert TokenNotPaused();\\n            }\\n\\n            uint256 roleMemberCount = getRoleMemberCount(GAME_ROLE);\\n            for (uint256 i; i < roleMemberCount; i++) {\\n                if (IGame(getRoleMember(GAME_ROLE, i)).hasPendingBets(token)) {\\n                    revert TokenHasPendingBets();\\n                }\\n            }\\n\\n            if (amount > balance) {\\n                amount = balance;\\n            }\\n            _safeTransfer(msg.sender, token, amount);\\n            emit Withdraw(token, amount);\\n        }\\n    }\\n\\n    /// @notice Sets the new token balance risk.\\n    /// @param token Address of the token.\\n    /// @param balanceRisk Risk rate.\\n    function setBalanceRisk(address token, uint16 balanceRisk)\\n        external\\n        onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\\n    {\\n        tokens[token].balanceRisk = balanceRisk;\\n        emit SetBalanceRisk(token, balanceRisk);\\n    }\\n\\n    /// @notice Adds a new token that'll be enabled for the games' betting.\\n    /// Token shouldn't exist yet.\\n    /// @param token Address of the token.\\n    function addToken(address token) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_tokensCount != 0) {\\n            for (uint8 i; i < _tokensCount; i++) {\\n                if (_tokensList[i] == token) {\\n                    revert TokenExists();\\n                }\\n            }\\n        }\\n        _tokensList[_tokensCount] = token;\\n        _tokensCount += 1;\\n        emit AddToken(token);\\n    }\\n\\n    /// @notice Changes the token's bet permission.\\n    /// @param token Address of the token.\\n    /// @param allowed Whether the token is enabled for bets.\\n    function setAllowedToken(address token, bool allowed)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        tokens[token].allowed = allowed;\\n        emit SetAllowedToken(token, allowed);\\n    }\\n\\n    /// @notice Changes the token's paused status.\\n    /// @param token Address of the token.\\n    /// @param paused Whether the token is paused.\\n    function setPausedToken(address token, bool paused)\\n        external\\n        onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\\n    {\\n        tokens[token].paused = paused;\\n        emit SetPausedToken(token, paused);\\n    }\\n\\n    /// @notice Changes the token's Upkeep min transfer amount.\\n    /// @param token Address of the token.\\n    /// @param minHouseEdgeWithdrawAmount Minimum amount of token to allow transfer.\\n    function setMinHouseEdgeWithdrawAmount(\\n        address token,\\n        uint256 minHouseEdgeWithdrawAmount\\n    ) external onlyTokenOwner(DEFAULT_ADMIN_ROLE, token) {\\n        tokens[token].minHouseEdgeWithdrawAmount = minHouseEdgeWithdrawAmount;\\n        emit SetMinHouseEdgeWithdrawAmount(token, minHouseEdgeWithdrawAmount);\\n    }\\n\\n    /// @notice Changes the token's partner address.\\n    /// It withdraw the available balance, the partner allocation, and the games' VRF fees.\\n    /// @param token Address of the token.\\n    /// @param partner Address of the partner.\\n    function setTokenPartner(address token, address partner)\\n        external\\n        onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\\n    {\\n        uint256 roleMemberCount = getRoleMemberCount(GAME_ROLE);\\n        for (uint256 i; i < roleMemberCount; i++) {\\n            IGame(getRoleMember(GAME_ROLE, i)).withdrawTokensVRFFees(token);\\n        }\\n        withdrawPartnerAmount(token);\\n        withdraw(token, getBalance(token));\\n        tokens[token].partner = partner;\\n        emit SetTokenPartner(token, partner);\\n    }\\n\\n    /// @notice Sets the token's house edge allocations for bet payout.\\n    /// @param token Address of the token.\\n    /// @param bank Rate to be allocated to the bank, on bet payout.\\n    /// @param dividend Rate to be allocated as staking rewards, on bet payout.\\n    /// @param partner Rate to be allocated to the partner, on bet payout.\\n    /// @param _treasury Rate to be allocated to the treasury, on bet payout.\\n    /// @param team Rate to be allocated to the team, on bet payout.\\n    /// @dev `bank`, `dividend`, `_treasury` and `team` rates sum must equals 10000.\\n    function setHouseEdgeSplit(\\n        address token,\\n        uint16 bank,\\n        uint16 dividend,\\n        uint16 partner,\\n        uint16 _treasury,\\n        uint16 team\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint16 splitSum = bank + dividend + team + partner + _treasury;\\n        if (splitSum != 10000) {\\n            revert WrongHouseEdgeSplit(splitSum);\\n        }\\n\\n        HouseEdgeSplit storage tokenHouseEdge = tokens[token].houseEdgeSplit;\\n        tokenHouseEdge.bank = bank;\\n        tokenHouseEdge.dividend = dividend;\\n        tokenHouseEdge.partner = partner;\\n        tokenHouseEdge.treasury = _treasury;\\n        tokenHouseEdge.team = team;\\n\\n        emit SetTokenHouseEdgeSplit(\\n            token,\\n            bank,\\n            dividend,\\n            partner,\\n            _treasury,\\n            team\\n        );\\n    }\\n\\n    /// @notice Sets the minimum bet amount for a specific token.\\n    /// @param token Address of the token.\\n    /// @param tokenMinBetAmount Minimum bet amount.\\n    function setTokenMinBetAmount(address token, uint256 tokenMinBetAmount)\\n        external\\n        onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\\n    {\\n        tokens[token].minBetAmount = tokenMinBetAmount;\\n        emit SetTokenMinBetAmount(token, tokenMinBetAmount);\\n    }\\n\\n    /// @notice Sets the Chainlink VRF subscription ID for a specific token.\\n    /// @param token Address of the token.\\n    /// @param subId Subscription ID.\\n    function setTokenVRFSubId(address token, uint64 subId)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        tokens[token].VRFSubId = subId;\\n        emit SetTokenVRFSubId(token, subId);\\n    }\\n\\n    /// @notice Harvests tokens dividends.\\n    function harvestDividends() external onlyRole(HARVESTER_ROLE) {\\n        for (uint8 i; i < _tokensCount; i++) {\\n            address tokenAddress = _tokensList[i];\\n            Token storage token = tokens[tokenAddress];\\n            uint256 dividendAmount = token.houseEdgeSplit.dividendAmount;\\n            if (dividendAmount != 0) {\\n                delete token.houseEdgeSplit.dividendAmount;\\n                _safeTransfer(msg.sender, tokenAddress, dividendAmount);\\n                emit HarvestDividend(tokenAddress, dividendAmount);\\n            }\\n        }\\n    }\\n\\n    /// @notice Splits the house edge fees and allocates them as dividends, to the partner, the bank, the treasury, and team.\\n    /// @param token Address of the token.\\n    /// @param fees Bet amount and bet profit fees amount.\\n    function _allocateHouseEdge(address token, uint256 fees) private {\\n        HouseEdgeSplit storage tokenHouseEdge = tokens[token].houseEdgeSplit;\\n\\n        uint256 partnerAmount;\\n        if (tokenHouseEdge.partner != 0) {\\n            partnerAmount = ((fees * tokenHouseEdge.partner) / 10000);\\n            tokenHouseEdge.partnerAmount += partnerAmount;\\n        }\\n\\n        uint256 dividendAmount = (fees * tokenHouseEdge.dividend) / 10000;\\n        tokenHouseEdge.dividendAmount += dividendAmount;\\n\\n        // The bank also get allocated a share of the house edge.\\n        uint256 bankAmount = (fees * tokenHouseEdge.bank) / 10000;\\n\\n        uint256 treasuryAmount = (fees * tokenHouseEdge.treasury) / 10000;\\n        tokenHouseEdge.treasuryAmount += treasuryAmount;\\n\\n        uint256 teamAmount = (fees * tokenHouseEdge.team) / 10000;\\n        tokenHouseEdge.teamAmount += teamAmount;\\n\\n        emit AllocateHouseEdgeAmount(\\n            token,\\n            bankAmount,\\n            dividendAmount,\\n            partnerAmount,\\n            treasuryAmount,\\n            teamAmount\\n        );\\n    }\\n\\n    /// @notice Payouts a winning bet, and allocate the house edge fee.\\n    /// @param user Address of the gamer.\\n    /// @param token Address of the token.\\n    /// @param profit Number of tokens to be sent to the gamer.\\n    /// @param fees Bet amount and bet profit fees amount.\\n    function payout(\\n        address user,\\n        address token,\\n        uint256 profit,\\n        uint256 fees\\n    ) external payable onlyRole(GAME_ROLE) {\\n        _allocateHouseEdge(token, fees);\\n\\n        // Pay the user\\n        _safeTransfer(user, token, profit);\\n        emit Payout(token, getBalance(token), profit);\\n    }\\n\\n    /// @notice Accounts a loss bet.\\n    /// @dev In case of an ERC20, the bet amount should be transfered prior to this tx.\\n    /// @dev In case of the gas token, the bet amount is sent along with this tx.\\n    /// @param tokenAddress Address of the token.\\n    /// @param amount Loss bet amount.\\n    /// @param fees Bet amount and bet profit fees amount.\\n    function cashIn(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint256 fees\\n    ) external payable onlyRole(GAME_ROLE) {\\n        if (fees != 0) {\\n            _allocateHouseEdge(tokenAddress, fees);\\n        }\\n\\n        emit CashIn(tokenAddress, getBalance(tokenAddress), amount);\\n    }\\n\\n    /// @notice Executed by Chainlink Keepers when `upkeepNeeded` is true.\\n    /// @param performData Data which was passed back from `checkUpkeep`.\\n    function performUpkeep(bytes calldata performData) external override {\\n        (UpkeepActions upkeepAction, address tokenAddress) = abi.decode(\\n            performData,\\n            (UpkeepActions, address)\\n        );\\n        Token memory token = tokens[tokenAddress];\\n\\n        if (\\n            upkeepAction == UpkeepActions.DistributePartnerHouseEdge &&\\n            token.houseEdgeSplit.partnerAmount >\\n            token.minHouseEdgeWithdrawAmount\\n        ) {\\n            withdrawPartnerAmount(tokenAddress);\\n        } else if (\\n            upkeepAction == UpkeepActions.DistributeOwnHouseEdge &&\\n            token.houseEdgeSplit.treasuryAmount +\\n                token.houseEdgeSplit.teamAmount >\\n            token.minHouseEdgeWithdrawAmount\\n        ) {\\n            withdrawHouseEdgeAmount(tokenAddress);\\n        }\\n    }\\n\\n    /// @dev For the front-end\\n    function getTokens() external view returns (TokenMetadata[] memory) {\\n        TokenMetadata[] memory _tokens = new TokenMetadata[](_tokensCount);\\n        for (uint8 i; i < _tokensCount; i++) {\\n            address tokenAddress = _tokensList[i];\\n            Token memory token = tokens[tokenAddress];\\n            if (_isGasToken(tokenAddress)) {\\n                _tokens[i] = TokenMetadata({\\n                    decimals: 18,\\n                    tokenAddress: tokenAddress,\\n                    name: \\\"ETH\\\",\\n                    symbol: \\\"ETH\\\",\\n                    token: token\\n                });\\n            } else {\\n                IERC20Metadata erc20Metadata = IERC20Metadata(tokenAddress);\\n                _tokens[i] = TokenMetadata({\\n                    decimals: erc20Metadata.decimals(),\\n                    tokenAddress: tokenAddress,\\n                    name: erc20Metadata.name(),\\n                    symbol: erc20Metadata.symbol(),\\n                    token: token\\n                });\\n            }\\n        }\\n        return _tokens;\\n    }\\n\\n    /// @notice Gets the token's min bet amount.\\n    /// @param token Address of the token.\\n    /// @return minBetAmount Min bet amount.\\n    /// @dev The min bet amount should be at least 10000 cause of the `getMaxBetAmount` calculation.\\n    function getMinBetAmount(address token)\\n        external\\n        view\\n        returns (uint256 minBetAmount)\\n    {\\n        minBetAmount = tokens[token].minBetAmount;\\n        if (minBetAmount < 10000) {\\n            minBetAmount = 10000;\\n        }\\n    }\\n\\n    /// @notice Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\\n    /// @param token Address of the token.\\n    /// @param multiplier The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\\n    /// @return Maximum bet amount for the token.\\n    /// @dev The multiplier should be at least 10000.\\n    function getMaxBetAmount(address token, uint256 multiplier)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return (getBalance(token) * tokens[token].balanceRisk) / multiplier;\\n    }\\n\\n    /// @notice Gets the token's allow status used on the games smart contracts.\\n    /// @param tokenAddress Address of the token.\\n    /// @return Whether the token is enabled for bets.\\n    function isAllowedToken(address tokenAddress) external view returns (bool) {\\n        Token memory token = tokens[tokenAddress];\\n        return token.allowed && !token.paused;\\n    }\\n\\n    /// @notice Runs by Chainlink Keepers at every block to determine if `performUpkeep` should be called.\\n    /// @param checkData Fixed and specified at Upkeep registration.\\n    /// @return upkeepNeeded Boolean that when True will trigger the on-chain performUpkeep call.\\n    /// @return performData Bytes that will be used as input parameter when calling performUpkeep.\\n    /// @dev `checkData` and `performData` are encoded with types (uint8, address).\\n    function checkUpkeep(bytes calldata checkData)\\n        external\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory performData)\\n    {\\n        (UpkeepActions upkeepAction, address tokenAddressData) = abi.decode(\\n            checkData,\\n            (UpkeepActions, address)\\n        );\\n\\n        Token memory token = tokens[tokenAddressData];\\n        if (\\n            (upkeepAction == UpkeepActions.DistributePartnerHouseEdge &&\\n                token.houseEdgeSplit.partnerAmount >\\n                token.minHouseEdgeWithdrawAmount) ||\\n            (upkeepAction == UpkeepActions.DistributeOwnHouseEdge &&\\n                token.houseEdgeSplit.treasuryAmount +\\n                    token.houseEdgeSplit.teamAmount >\\n                token.minHouseEdgeWithdrawAmount)\\n        ) {\\n            upkeepNeeded = true;\\n            performData = abi.encode(upkeepAction, tokenAddressData);\\n        }\\n    }\\n\\n    /// @notice Gets the token's Chainlink VRF v2 Subscription ID.\\n    /// @param token Address of the token.\\n    /// @return Chainlink VRF v2 Subscription ID.\\n    function getVRFSubId(address token) external view returns (uint64) {\\n        return tokens[token].VRFSubId;\\n    }\\n\\n    /// @notice Gets the token's owner.\\n    /// @param token Address of the token.\\n    /// @return Address of the owner.\\n    function getTokenOwner(address token) external view returns (address) {\\n        address partner = tokens[token].partner;\\n        if (partner == address(0)) {\\n            return getRoleMember(DEFAULT_ADMIN_ROLE, 0);\\n        } else {\\n            return partner;\\n        }\\n    }\\n\\n    /// @notice Sets the new team wallet.\\n    /// @param _teamWallet The team wallet address.\\n    function setTeamWallet(address _teamWallet)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        if (_teamWallet == address(0)) {\\n            revert WrongAddress();\\n        }\\n        teamWallet = _teamWallet;\\n        emit SetTeamWallet(teamWallet);\\n    }\\n\\n    /// @notice Distributes the token's treasury and team allocations amounts.\\n    /// @param tokenAddress Address of the token.\\n    function withdrawHouseEdgeAmount(address tokenAddress) public {\\n        HouseEdgeSplit storage tokenHouseEdge = tokens[tokenAddress]\\n            .houseEdgeSplit;\\n        uint256 treasuryAmount = tokenHouseEdge.treasuryAmount;\\n        uint256 teamAmount = tokenHouseEdge.teamAmount;\\n        if (treasuryAmount != 0) {\\n            delete tokenHouseEdge.treasuryAmount;\\n            _safeTransfer(treasury, tokenAddress, treasuryAmount);\\n        }\\n        if (teamAmount != 0) {\\n            delete tokenHouseEdge.teamAmount;\\n            _safeTransfer(teamWallet, tokenAddress, teamAmount);\\n        }\\n        if (treasuryAmount != 0 || teamAmount != 0) {\\n            emit HouseEdgeDistribution(\\n                tokenAddress,\\n                treasuryAmount,\\n                teamAmount\\n            );\\n        }\\n    }\\n\\n    /// @notice Distributes the token's partner amount.\\n    /// @param tokenAddress Address of the token.\\n    function withdrawPartnerAmount(address tokenAddress) public {\\n        Token storage token = tokens[tokenAddress];\\n        uint256 partnerAmount = token.houseEdgeSplit.partnerAmount;\\n        if (partnerAmount != 0 && token.partner != address(0)) {\\n            delete token.houseEdgeSplit.partnerAmount;\\n            _safeTransfer(token.partner, tokenAddress, partnerAmount);\\n            emit HouseEdgePartnerDistribution(tokenAddress, partnerAmount);\\n        }\\n    }\\n\\n    /// @notice Gets the token's balance.\\n    /// The token's house edge allocation amounts are subtracted from the balance.\\n    /// @param token Address of the token.\\n    /// @return The amount of token available for profits.\\n    function getBalance(address token) public view returns (uint256) {\\n        uint256 balance;\\n        if (_isGasToken(token)) {\\n            balance = address(this).balance;\\n        } else {\\n            balance = IERC20(token).balanceOf(address(this));\\n        }\\n        HouseEdgeSplit memory tokenHouseEdgeSplit = tokens[token]\\n            .houseEdgeSplit;\\n        return\\n            balance -\\n            tokenHouseEdgeSplit.dividendAmount -\\n            tokenHouseEdgeSplit.partnerAmount -\\n            tokenHouseEdgeSplit.treasuryAmount -\\n            tokenHouseEdgeSplit.teamAmount;\\n    }\\n}\",\"keccak256\":\"0x3520e669f99dffbbde63b459d4d7d842077034776cd8721b15df313bb01ae697\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620042ac380380620042ac83398101604081905262000034916200050c565b6001600160a01b0382166200005c57604051630d23cf4160e11b815260040160405180910390fd5b6001600160a01b0382166080526200007660003362000089565b620000818162000099565b5050620006a4565b6200009582826200012e565b5050565b6000620000a68162000171565b6001600160a01b038216620000ce57604051630d23cf4160e11b815260040160405180910390fd5b60028054610100600160a81b0319166101006001600160a01b038581168202929092179283905560405192041681527fc6a5dd316fe9d0339f2769deab7e31f64c8f5b101ffd85dfc9a83dbeaf2e69da9060200160405180910390a15050565b6200014582826200018060201b620024931760201c565b60008281526001602090815260409091206200016c9183906200251762000220821b17901c565b505050565b6200017d813362000240565b50565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000095576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001dc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000237836001600160a01b038416620002e4565b90505b92915050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000095576200028a816001600160a01b031660146200033660201b6200252c1760201c565b620002a08360206200252c62000336821b17811c565b604051602001620002b39291906200056a565b60408051601f198184030181529082905262461bcd60e51b8252620002db91600401620005e3565b60405180910390fd5b60008181526001830160205260408120546200032d575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200023a565b5060006200023a565b60606000620003478360026200062e565b6200035490600262000648565b6001600160401b038111156200036e576200036e6200065e565b6040519080825280601f01601f19166020018201604052801562000399576020820181803683370190505b509050600360fc1b81600081518110620003b757620003b762000674565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110620003e957620003e962000674565b60200101906001600160f81b031916908160001a90535060006200040f8460026200062e565b6200041c90600162000648565b90505b60018111156200049e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062000454576200045462000674565b1a60f81b8282815181106200046d576200046d62000674565b60200101906001600160f81b031916908160001a90535060049490941c9362000496816200068a565b90506200041f565b508315620002375760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620002db565b80516001600160a01b03811681146200050757600080fd5b919050565b600080604083850312156200052057600080fd5b6200052b83620004ef565b91506200053b60208401620004ef565b90509250929050565b60005b838110156200056157818101518382015260200162000547565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351620005a481601785016020880162000544565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351620005d781602884016020880162000544565b01602801949350505050565b60208152600082518060208401526200060481604085016020870162000544565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176200023a576200023a62000618565b808201808211156200023a576200023a62000618565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816200069c576200069c62000618565b506000190190565b608051613be5620006c7600039600081816104d3015261094f0152613be56000f3fe6080604052600436106102465760003560e01c8063802ad8fb11610139578063ca15c873116100b6578063dc17c9ca1161007a578063dc17c9ca14610745578063e486033914610765578063f3fef3a314610867578063f6b2a2f114610887578063f743b84c146108a7578063f8b2cb4f146108c757600080fd5b8063ca15c873146106b2578063cbe230c3146106d2578063d41b8c6f146106f2578063d48bfca714610705578063d547741f1461072557600080fd5b8063aa6ca808116100fd578063aa6ca80814610601578063ab40070614610623578063ac9650d814610645578063bc3ec38314610672578063c437afde1461069257600080fd5b8063802ad8fb146105775780638aaa22841461058c5780639010d07c146105ac57806391d14854146105cc578063a217fddf146105ec57600080fd5b806338c64d2f116101c7578063599270441161018b578063599270441461048457806361d027b3146104c157806363a560ec146104f55780636dfa8e52146105295780636e04ff0d1461054957600080fd5b806338c64d2f146103f15780634297dcbe146104115780634585e33b1461043157806347e7ef241461045157806356f0406d1461046457600080fd5b8063278b39de1161020e578063278b39de14610313578063279e3415146103335780632ee99d3e146103915780632f2ff15d146103b157806336568abe146103d157600080fd5b806301ffc9a71461024b5780630ae30cb0146102805780631525ff7d146102a25780631f615023146102c2578063248a9ca3146102d5575b600080fd5b34801561025757600080fd5b5061026b610266366004613158565b6108e7565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b506102a061029b366004613197565b610912565b005b3480156102ae57600080fd5b506102a06102bd366004613197565b6109fc565b6102a06102d03660046131b4565b610a8f565b3480156102e157600080fd5b506103056102f03660046131fa565b60009081526020819052604090206001015490565b604051908152602001610277565b34801561031f57600080fd5b5061030561032e366004613213565b610b0f565b34801561033f57600080fd5b5061037961034e366004613197565b6001600160a01b0316600090815260036020526040902054600160201b90046001600160401b031690565b6040516001600160401b039091168152602001610277565b34801561039d57600080fd5b506102a06103ac366004613251565b610b58565b3480156103bd57600080fd5b506102a06103cc3660046132c7565b610d06565b3480156103dd57600080fd5b506102a06103ec3660046132c7565b610d30565b3480156103fd57600080fd5b506102a061040c366004613197565b610dae565b34801561041d57600080fd5b506102a061042c366004613213565b610e5b565b34801561043d57600080fd5b506102a061044c3660046132f7565b610f0e565b6102a061045f366004613213565b6110c4565b34801561047057600080fd5b506102a061047f366004613368565b61118d565b34801561049057600080fd5b506002546104a99061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610277565b3480156104cd57600080fd5b506104a97f000000000000000000000000000000000000000000000000000000000000000081565b34801561050157600080fd5b506103057f3fc733b4d20d27a28452ddf0e9351aced28242fe03389a653cdb783955316b9b81565b34801561053557600080fd5b506102a061054436600461339d565b611255565b34801561055557600080fd5b506105696105643660046132f7565b6112d3565b604051610277929190613427565b34801561058357600080fd5b506102a06114a2565b34801561059857600080fd5b506102a06105a7366004613450565b611580565b3480156105b857600080fd5b506104a96105c736600461347e565b6115e3565b3480156105d857600080fd5b5061026b6105e73660046132c7565b6115fb565b3480156105f857600080fd5b50610305600081565b34801561060d57600080fd5b50610616611624565b6040516102779190613518565b34801561062f57600080fd5b50610305600080516020613b6983398151915281565b34801561065157600080fd5b50610665610660366004613648565b6119f8565b60405161027791906136aa565b34801561067e57600080fd5b506102a061068d36600461370c565b611aec565b34801561069e57600080fd5b506102a06106ad366004613450565b611c89565b3480156106be57600080fd5b506103056106cd3660046131fa565b611d4b565b3480156106de57600080fd5b5061026b6106ed366004613197565b611d62565b6102a061070036600461373a565b611e8b565b34801561071157600080fd5b506102a0610720366004613197565b611efb565b34801561073157600080fd5b506102a06107403660046132c7565b61200f565b34801561075157600080fd5b506104a9610760366004613197565b612034565b34801561077157600080fd5b50610853610780366004613197565b6003602081815260009283526040928390208054600182015460028301548651610120810188529584015461ffff808216885262010000808304821697890197909752600160201b808304821699890199909952600160301b820481166060890152600160401b90910481166080880152600485015460a0880152600585015460c0880152600685015460e08801526007909401546101008088019190915260ff808516989185041696958404909416949383046001600160401b031693600160601b9093046001600160a01b03169288565b60405161027798979695949392919061376f565b34801561087357600080fd5b506102a0610882366004613213565b612069565b34801561089357600080fd5b506103056108a2366004613197565b61225c565b3480156108b357600080fd5b506102a06108c2366004613213565b61228c565b3480156108d357600080fd5b506103056108e2366004613197565b61233f565b60006001600160e01b03198216635a05180f60e01b148061090c575061090c826126c7565b92915050565b6001600160a01b038116600090815260036020819052604090912060068101546007820154919092019190811561097557600060038401556109757f000000000000000000000000000000000000000000000000000000000000000085846126fc565b801561099e576000600484015560025461099e9061010090046001600160a01b031685836126fc565b811515806109ab57508015155b156109f65760408051838152602081018390526001600160a01b038616917f0146f1701c23c89f761280798d36d6c4e3acb349438456f5da8f83a2f5dd8cdc91015b60405180910390a25b50505050565b6000610a0781612728565b6001600160a01b038216610a2e57604051630d23cf4160e11b815260040160405180910390fd5b60028054610100600160a81b0319166101006001600160a01b038581168202929092179283905560405192041681527fc6a5dd316fe9d0339f2769deab7e31f64c8f5b101ffd85dfc9a83dbeaf2e69da906020015b60405180910390a15050565b600080516020613b69833981519152610aa781612728565b610ab18483612735565b610abc8585856126fc565b836001600160a01b03167f634235fcf5af0adbca1a405ec65f6f6c08f55e1f379c2c45cd10f23cb29e0e31610af08661233f565b6040805191825260208201879052015b60405180910390a25050505050565b6001600160a01b038216600090815260036020526040812054829062010000900461ffff16610b3d8561233f565b610b4791906137e7565b610b5191906137fe565b9392505050565b6000610b6381612728565b6000838584610b72898b613820565b610b7c9190613820565b610b869190613820565b610b909190613820565b90508061ffff1661271014610bc3576040516318410e1160e21b815261ffff821660048201526024015b60405180910390fd5b6000600360008a6001600160a01b03166001600160a01b031681526020019081526020016000206003019050878160000160006101000a81548161ffff021916908361ffff160217905550868160000160026101000a81548161ffff021916908361ffff160217905550858160000160046101000a81548161ffff021916908361ffff160217905550848160000160066101000a81548161ffff021916908361ffff160217905550838160000160086101000a81548161ffff021916908361ffff160217905550886001600160a01b03167f87512489f5b5226512d8f1bfede20d9e809ff4042f028da79c833ed04baa83978989898989604051610cf395949392919061ffff95861681529385166020850152918416604084015283166060830152909116608082015260a00190565b60405180910390a2505050505050505050565b600082815260208190526040902060010154610d2181612728565b610d2b83836128f6565b505050565b6001600160a01b0381163314610da05760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610bba565b610daa8282612918565b5050565b6001600160a01b038116600090815260036020526040902060058101548015801590610dea57508154600160601b90046001600160a01b031615155b15610d2b57600060058301558154610e1390600160601b90046001600160a01b031684836126fc565b826001600160a01b03167f1aa0fc6b9bc54a055d93b640b2c7313e0bd2944482e0b6b5fec7048bbdaacd8182604051610e4e91815260200190565b60405180910390a2505050565b6001600160a01b0380831660009081526003602052604081205490918491600160601b90041680610e9557610e90833361293a565b610ebe565b336001600160a01b03821614610ebe57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b03851660008181526003602052604090819020600101869055517f8b4a07860448b613116df3f175c837980eceaca7d1dc5143c46a20ab31ec00f990610b009087815260200190565b600080610f1d8385018561383b565b6001600160a01b03818116600090815260036020818152604080842081516101008082018452825460ff80821615158452828204161515838701526201000080820461ffff90811685880152600160201b8084046001600160401b0316606080880191909152600160601b909404909b16608080870191909152600187015460a080880191909152600288015460c080890191909152895161012081018b529b8901548085168d5294850484169a8c019a909a529b83048216978a0197909752600160301b8204811692890192909252600160401b90041693860193909352600482015496850196909652600581015492840192909252600682015460e08085019190915260079092015490830152830152929450909250908360018111156110485761104861385d565b14801561106057508060c001518160e0015160c00151115b156110735761106e82610dae565b6110bd565b60018360018111156110875761108761385d565b1480156110af575060c081015160e0808301516101008101519101516110ad9190613873565b115b156110bd576110bd82610912565b5050505050565b6001600160a01b0380831660009081526003602052604081205490918491600160601b900416806110fe576110f9833361293a565b611127565b336001600160a01b0382161461112757604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b03851661113d57349350611152565b6111526001600160a01b03861633308761299e565b846001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c85604051610b0091815260200190565b6001600160a01b0380831660009081526003602052604081205490918491600160601b900416806111c7576111c2833361293a565b6111f0565b336001600160a01b038216146111f057604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b038516600081815260036020908152604091829020805463ffff000019166201000061ffff8a169081029190911790915591519182527f68288b0936dd994d19323ee940b2703e7bf46fae2552319d60dc1239ba52ec689101610b00565b600061126081612728565b6001600160a01b03831660008181526003602090815260409182902080546bffffffffffffffff000000001916600160201b6001600160401b0388169081029190911790915591519182527fae367543cf47ca7e51a9f3f92711553aa33777847f719f7e2821ea8d846ed0e19101610e4e565b6000606081806112e58587018761383b565b6001600160a01b03818116600090815260036020818152604080842081516101008082018452825460ff80821615158452828204161515838701526201000080820461ffff90811685880152600160201b8084046001600160401b0316606080880191909152600160601b909404909b16608080870191909152600187015460a080880191909152600288015460c080890191909152895161012081018b529b8901548085168d5294850484169a8c019a909a529b83048216978a0197909752600160301b8204811692890192909252600160401b90041693860193909352600482015496850196909652600581015492840192909252600682015460e08085019190915260079092015490830152830152929450909250908360018111156114105761141061385d565b14801561142857508060c001518160e0015160c00151115b8061146a575060018360018111156114425761144261385d565b14801561146a575060c081015160e0808301516101008101519101516114689190613873565b115b1561149857600194508282604051602001611486929190613886565b60405160208183030381529060405293505b5050509250929050565b7f3fc733b4d20d27a28452ddf0e9351aced28242fe03389a653cdb783955316b9b6114cc81612728565b60005b60025460ff9081169082161015610daa5760ff81166000908152600460208181526040808420546001600160a01b0316808552600390925290922090810154801561156a57600060048301556115263384836126fc565b826001600160a01b03167fca64dbcaf91abfb066e7a5163f1d135f8f48f2cbdb0395e3b35cc278ebbd340b8260405161156191815260200190565b60405180910390a25b5050508080611578906138c0565b9150506114cf565b600061158b81612728565b6001600160a01b038316600081815260036020908152604091829020805460ff191686151590811790915591519182527fe589eb036e62c07e307aa4d441bd39c81e8bd86f349eaacb0caa06b1477f7f9a9101610e4e565b6000828152600160205260408120610b519083612a09565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60025460609060009060ff166001600160401b03811115611647576116476138df565b60405190808252806020026020018201604052801561168057816020015b61166d61309b565b8152602001906001900390816116655790505b50905060005b60025460ff90811690821610156119f25760ff8181166000908152600460208181526040808420546001600160a01b03908116808652600380855295839020835161010080820186528254808b1615158352818104909a1615158288015262010000808b0461ffff90811684890152600160201b808d046001600160401b0316606080870191909152600160601b909d04909716608080860191909152600186015460a080870191909152600287015460c0808801919091528a5161012081018c529d8801548085168f5294850484169b8e019b909b529783048216988c0198909852600160301b820481169b8b019b909b52600160401b9004909916948801949094529485015491860191909152600584015492850192909252600683015460e08086019190915260079093015494840194909452908301919091529081611858576040518060a00160405280601260ff168152602001836001600160a01b031681526020016040518060400160405280600381526020016208aa8960eb1b81525081526020016040518060400160405280600381526020016208aa8960eb1b815250815260200182815250848460ff1681518110611848576118486138f5565b60200260200101819052506119dd565b60008290506040518060a00160405280826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ca919061390b565b60ff168152602001846001600160a01b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561191f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611947919081019061392e565b8152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561198a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119b2919081019061392e565b815260200183815250858560ff16815181106119d0576119d06138f5565b6020026020010181905250505b505080806119ea906138c0565b915050611686565b50919050565b6060816001600160401b03811115611a1257611a126138df565b604051908082528060200260200182016040528015611a4557816020015b6060815260200190600190039081611a305790505b50905060005b82811015611ae557611ab530858584818110611a6957611a696138f5565b9050602002810190611a7b91906139cf565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a1592505050565b828281518110611ac757611ac76138f5565b60200260200101819052508080611add90613a1c565b915050611a4b565b5092915050565b6001600160a01b0380831660009081526003602052604081205490918491600160601b90041680611b2657611b21833361293a565b611b4f565b336001600160a01b03821614611b4f57604051634ca8886760e01b815260040160405180910390fd5b6000611b68600080516020613b69833981519152611d4b565b905060005b81811015611bfd57611b8d600080516020613b69833981519152826115e3565b60405163383e6aaf60e11b81526001600160a01b038981166004830152919091169063707cd55e90602401600060405180830381600087803b158015611bd257600080fd5b505af1158015611be6573d6000803e3d6000fd5b505050508080611bf590613a1c565b915050611b6d565b50611c0786610dae565b611c14866108828861233f565b6001600160a01b0386811660008181526003602090815260409182902080546bffffffffffffffffffffffff16600160601b958b16958602179055905192835290917fc991529379552af6d0789cc899d5180a270a4bc3b1a3892adcac3d95f93dda1d910160405180910390a2505050505050565b6001600160a01b0380831660009081526003602052604081205490918491600160601b90041680611cc357611cbe833361293a565b611cec565b336001600160a01b03821614611cec57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0385166000818152600360205260409081902080548715156101000261ff0019909116179055517f624dd6809915867c3c11279c2699633040681f0e4efb0fa9a193217a11903c6090610b0090871515815260200190565b600081815260016020526040812061090c90612a3a565b6001600160a01b03818116600090815260036020818152604080842081516101008082018452825460ff80821615158452828204161515838701526201000080820461ffff90811685880152600160201b8084046001600160401b0316606080880191909152600160601b909404909b16608080870191909152600187015460a080880191909152600288015460c080890191909152895161012081018b529b8901548085168d5294850484169a8c019a909a529b83048216978a0197909752600160301b8204811692890192909252600160401b90041693860193909352600482015496850196909652600581015492840192909252600682015460e0808501919091526007909201549083015283015281519091908015610b515750602001511592915050565b600080516020613b69833981519152611ea381612728565b8115611eb357611eb38483612735565b836001600160a01b03167f812b76b477469edc716929cbf7ed54e3d9c1a68d8b9f8290dbabcda54d96fcbe611ee78661233f565b6040805191825260208201879052016109ed565b6000611f0681612728565b60025460ff1615611f775760005b60025460ff9081169082161015611f755760ff81166000908152600460205260409020546001600160a01b03808516911603611f6357604051632ae3f45d60e11b815260040160405180910390fd5b80611f6d816138c0565b915050611f14565b505b6002805460ff908116600090815260046020526040812080546001600160a01b0319166001600160a01b038716179055825460019392611fb991859116613a35565b92506101000a81548160ff021916908360ff1602179055507fe473c74f34be27c1464d6624f14a0d7fd4e301cbfa29c3eba425d378c8a7ebe082604051610a8391906001600160a01b0391909116815260200190565b60008281526020819052604090206001015461202a81612728565b610d2b8383612918565b6001600160a01b038082166000908152600360205260408120549091600160601b909104168061090c57610b516000806115e3565b6001600160a01b0380831660009081526003602052604081205490918491600160601b900416806120a35761209e833361293a565b6120cc565b336001600160a01b038216146120cc57604051634ca8886760e01b815260040160405180910390fd5b60006120d78661233f565b90508015612254576001600160a01b038616600090815260036020526040902054610100900460ff1661211d576040516393b3a85d60e01b815260040160405180910390fd5b6000612136600080516020613b69833981519152611d4b565b905060005b818110156121f75761215b600080516020613b69833981519152826115e3565b60405163594043fd60e01b81526001600160a01b038a81166004830152919091169063594043fd90602401602060405180830381865afa1580156121a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c79190613a4e565b156121e55760405163055212b760e51b815260040160405180910390fd5b806121ef81613a1c565b91505061213b565b5081861115612204578195505b61220f3388886126fc565b866001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648760405161224a91815260200190565b60405180910390a2505b505050505050565b6001600160a01b03811660009081526003602052604090206001015461271081101561228757506127105b919050565b6001600160a01b0380831660009081526003602052604081205490918491600160601b900416806122c6576122c1833361293a565b6122ef565b336001600160a01b038216146122ef57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b03851660008181526003602052604090819020600201869055517f2c799d8bd0ce047a73ee6661740b3e780a2a13dd04c1201fca543f181bdff5ff90610b009087815260200190565b6000806001600160a01b0383166123575750476123c2565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa15801561239b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bf9190613a6b565b90505b6001600160a01b0383166000908152600360208181526040928390208351610120810185529281015461ffff8082168552620100008204811693850193909352600160201b8104831694840194909452600160301b840482166060840152600160401b909304166080820152600482015460a08201819052600583015460c08301819052600684015460e08401819052600790940154610100840181905292939161246d9086613a84565b6124779190613a84565b6124819190613a84565b61248b9190613a84565b949350505050565b61249d82826115fb565b610daa576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556124d33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610b51836001600160a01b038416612a44565b6060600061253b8360026137e7565b612546906002613873565b6001600160401b0381111561255d5761255d6138df565b6040519080825280601f01601f191660200182016040528015612587576020820181803683370190505b509050600360fc1b816000815181106125a2576125a26138f5565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106125d1576125d16138f5565b60200101906001600160f81b031916908160001a90535060006125f58460026137e7565b612600906001613873565b90505b6001811115612678576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612634576126346138f5565b1a60f81b82828151811061264a5761264a6138f5565b60200101906001600160f81b031916908160001a90535060049490941c9361267181613a97565b9050612603565b508315610b515760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610bba565b60006001600160e01b03198216637965db0b60e01b148061090c57506301ffc9a760e01b6001600160e01b031983161461090c565b6001600160a01b03821661271457610d2b8382612a93565b610d2b6001600160a01b0383168483612bac565b612732813361293a565b50565b6001600160a01b03821660009081526003602081905260408220018054909190600160201b900461ffff16156127a65781546127109061278090600160201b900461ffff16856137e7565b61278a91906137fe565b9050808260020160008282546127a09190613873565b90915550505b8154600090612710906127c39062010000900461ffff16866137e7565b6127cd91906137fe565b9050808360010160008282546127e39190613873565b90915550508254600090612710906127ff9061ffff16876137e7565b61280991906137fe565b84549091506000906127109061282a90600160301b900461ffff16886137e7565b61283491906137fe565b90508085600301600082825461284a9190613873565b909155505084546000906127109061286d90600160401b900461ffff16896137e7565b61287791906137fe565b90508086600401600082825461288d9190613873565b9091555050604080518481526020810186905290810186905260608101839052608081018290526001600160a01b038916907fc73e6f5bcd4395126567ead7e4c14b7c52a5f0b9eabd3335a05e631646a127e39060a00160405180910390a25050505050505050565b6129008282612493565b6000828152600160205260409020610d2b9082612517565b6129228282612bdc565b6000828152600160205260409020610d2b9082612c41565b61294482826115fb565b610daa5761295c816001600160a01b0316601461252c565b61296783602061252c565b604051602001612978929190613aae565b60408051601f198184030181529082905262461bcd60e51b8252610bba91600401613b23565b6040516001600160a01b03808516602483015283166044820152606481018290526109f69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c56565b6000610b518383612d28565b6060610b518383604051806060016040528060278152602001613b8960279139612d52565b600061090c825490565b6000818152600183016020526040812054612a8b5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561090c565b50600061090c565b80471015612ae35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610bba565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612b30576040519150601f19603f3d011682016040523d82523d6000602084013e612b35565b606091505b5050905080610d2b5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610bba565b6040516001600160a01b038316602482015260448101829052610d2b90849063a9059cbb60e01b906064016129d2565b612be682826115fb565b15610daa576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610b51836001600160a01b038416612e2f565b6000612cab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f229092919063ffffffff16565b805190915015610d2b5780806020019051810190612cc99190613a4e565b610d2b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610bba565b6000826000018281548110612d3f57612d3f6138f5565b9060005260206000200154905092915050565b60606001600160a01b0384163b612dba5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610bba565b600080856001600160a01b031685604051612dd59190613b36565b600060405180830381855af49150503d8060008114612e10576040519150601f19603f3d011682016040523d82523d6000602084013e612e15565b606091505b5091509150612e25828286612f31565b9695505050505050565b60008181526001830160205260408120548015612f18576000612e53600183613a84565b8554909150600090612e6790600190613a84565b9050818114612ecc576000866000018281548110612e8757612e876138f5565b9060005260206000200154905080876000018481548110612eaa57612eaa6138f5565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612edd57612edd613b52565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061090c565b600091505061090c565b606061248b8484600085612f6a565b60608315612f40575081610b51565b825115612f505782518084602001fd5b8160405162461bcd60e51b8152600401610bba9190613b23565b606082471015612fcb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610bba565b6001600160a01b0385163b6130225760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bba565b600080866001600160a01b0316858760405161303e9190613b36565b60006040518083038185875af1925050503d806000811461307b576040519150601f19603f3d011682016040523d82523d6000602084013e613080565b606091505b5091509150613090828286612f31565b979650505050505050565b6040518060a00160405280600060ff16815260200160006001600160a01b031681526020016060815260200160608152602001613153604080516101008082018352600080835260208084018290528385018290526060808501839052608080860184905260a080870185905260c0808801869052885161012081018a528681529485018690529784018590529183018490528201839052810182905293840181905260e08481018290529184015290919082015290565b905290565b60006020828403121561316a57600080fd5b81356001600160e01b031981168114610b5157600080fd5b6001600160a01b038116811461273257600080fd5b6000602082840312156131a957600080fd5b8135610b5181613182565b600080600080608085870312156131ca57600080fd5b84356131d581613182565b935060208501356131e581613182565b93969395505050506040820135916060013590565b60006020828403121561320c57600080fd5b5035919050565b6000806040838503121561322657600080fd5b823561323181613182565b946020939093013593505050565b803561ffff8116811461228757600080fd5b60008060008060008060c0878903121561326a57600080fd5b863561327581613182565b95506132836020880161323f565b94506132916040880161323f565b935061329f6060880161323f565b92506132ad6080880161323f565b91506132bb60a0880161323f565b90509295509295509295565b600080604083850312156132da57600080fd5b8235915060208301356132ec81613182565b809150509250929050565b6000806020838503121561330a57600080fd5b82356001600160401b038082111561332157600080fd5b818501915085601f83011261333557600080fd5b81358181111561334457600080fd5b86602082850101111561335657600080fd5b60209290920196919550909350505050565b6000806040838503121561337b57600080fd5b823561338681613182565b91506133946020840161323f565b90509250929050565b600080604083850312156133b057600080fd5b82356133bb81613182565b915060208301356001600160401b03811681146132ec57600080fd5b60005b838110156133f25781810151838201526020016133da565b50506000910152565b600081518084526134138160208601602086016133d7565b601f01601f19169290920160200192915050565b821515815260406020820152600061248b60408301846133fb565b801515811461273257600080fd5b6000806040838503121561346357600080fd5b823561346e81613182565b915060208301356132ec81613442565b6000806040838503121561349157600080fd5b50508035926020909101359150565b61ffff8082511683528060208301511660208401528060408301511660408401525060608101516134d7606084018261ffff169052565b5060808101516134ed608084018261ffff169052565b5060a0818101519083015260c0808201519083015260e0808201519083015261010090810151910152565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561363a57888303603f190185528151805160ff168452878101516001600160a01b0316888501528681015161028088860181905290613584828701826133fb565b9150506060808301518683038288015261359e83826133fb565b925050608080840151935083511515818801528a84015160a0811515818a01528b860151915060c061ffff8316818b015284870151945060e092506135ed838b01866001600160401b03169052565b928601516001600160a01b03166101008a0152850151610120890152908401516101408801529092015191506136276101608601836134a0565b958801959350509086019060010161353f565b509098975050505050505050565b6000806020838503121561365b57600080fd5b82356001600160401b038082111561367257600080fd5b818501915085601f83011261368657600080fd5b81358181111561369557600080fd5b8660208260051b850101111561335657600080fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156136ff57603f198886030184526136ed8583516133fb565b945092850192908501906001016136d1565b5092979650505050505050565b6000806040838503121561371f57600080fd5b823561372a81613182565b915060208301356132ec81613182565b60008060006060848603121561374f57600080fd5b833561375a81613182565b95602085013595506040909401359392505050565b8815158152871515602082015261ffff871660408201526001600160401b03861660608201526001600160a01b038516608082015260a0810184905260c0810183905261020081016137c460e08301846134a0565b9998505050505050505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761090c5761090c6137d1565b60008261381b57634e487b7160e01b600052601260045260246000fd5b500490565b61ffff818116838216019080821115611ae557611ae56137d1565b6000806040838503121561384e57600080fd5b82356002811061372a57600080fd5b634e487b7160e01b600052602160045260246000fd5b8082018082111561090c5761090c6137d1565b60408101600284106138a857634e487b7160e01b600052602160045260246000fd5b9281526001600160a01b039190911660209091015290565b600060ff821660ff81036138d6576138d66137d1565b60010192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561391d57600080fd5b815160ff81168114610b5157600080fd5b60006020828403121561394057600080fd5b81516001600160401b038082111561395757600080fd5b818401915084601f83011261396b57600080fd5b81518181111561397d5761397d6138df565b604051601f8201601f19908116603f011681019083821181831017156139a5576139a56138df565b816040528281528760208487010111156139be57600080fd5b6130908360208301602088016133d7565b6000808335601e198436030181126139e657600080fd5b8301803591506001600160401b03821115613a0057600080fd5b602001915036819003821315613a1557600080fd5b9250929050565b600060018201613a2e57613a2e6137d1565b5060010190565b60ff818116838216019081111561090c5761090c6137d1565b600060208284031215613a6057600080fd5b8151610b5181613442565b600060208284031215613a7d57600080fd5b5051919050565b8181038181111561090c5761090c6137d1565b600081613aa657613aa66137d1565b506000190190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613ae68160178501602088016133d7565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613b178160288401602088016133d7565b01602801949350505050565b602081526000610b5160208301846133fb565b60008251613b488184602087016133d7565b9190910192915050565b634e487b7160e01b600052603160045260246000fdfe6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa88416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220041ed88ba201ae3acecea0e93e9bf1d28478b4eb813f4e901b2919231c68351064736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106102465760003560e01c8063802ad8fb11610139578063ca15c873116100b6578063dc17c9ca1161007a578063dc17c9ca14610745578063e486033914610765578063f3fef3a314610867578063f6b2a2f114610887578063f743b84c146108a7578063f8b2cb4f146108c757600080fd5b8063ca15c873146106b2578063cbe230c3146106d2578063d41b8c6f146106f2578063d48bfca714610705578063d547741f1461072557600080fd5b8063aa6ca808116100fd578063aa6ca80814610601578063ab40070614610623578063ac9650d814610645578063bc3ec38314610672578063c437afde1461069257600080fd5b8063802ad8fb146105775780638aaa22841461058c5780639010d07c146105ac57806391d14854146105cc578063a217fddf146105ec57600080fd5b806338c64d2f116101c7578063599270441161018b578063599270441461048457806361d027b3146104c157806363a560ec146104f55780636dfa8e52146105295780636e04ff0d1461054957600080fd5b806338c64d2f146103f15780634297dcbe146104115780634585e33b1461043157806347e7ef241461045157806356f0406d1461046457600080fd5b8063278b39de1161020e578063278b39de14610313578063279e3415146103335780632ee99d3e146103915780632f2ff15d146103b157806336568abe146103d157600080fd5b806301ffc9a71461024b5780630ae30cb0146102805780631525ff7d146102a25780631f615023146102c2578063248a9ca3146102d5575b600080fd5b34801561025757600080fd5b5061026b610266366004613158565b6108e7565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b506102a061029b366004613197565b610912565b005b3480156102ae57600080fd5b506102a06102bd366004613197565b6109fc565b6102a06102d03660046131b4565b610a8f565b3480156102e157600080fd5b506103056102f03660046131fa565b60009081526020819052604090206001015490565b604051908152602001610277565b34801561031f57600080fd5b5061030561032e366004613213565b610b0f565b34801561033f57600080fd5b5061037961034e366004613197565b6001600160a01b0316600090815260036020526040902054600160201b90046001600160401b031690565b6040516001600160401b039091168152602001610277565b34801561039d57600080fd5b506102a06103ac366004613251565b610b58565b3480156103bd57600080fd5b506102a06103cc3660046132c7565b610d06565b3480156103dd57600080fd5b506102a06103ec3660046132c7565b610d30565b3480156103fd57600080fd5b506102a061040c366004613197565b610dae565b34801561041d57600080fd5b506102a061042c366004613213565b610e5b565b34801561043d57600080fd5b506102a061044c3660046132f7565b610f0e565b6102a061045f366004613213565b6110c4565b34801561047057600080fd5b506102a061047f366004613368565b61118d565b34801561049057600080fd5b506002546104a99061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610277565b3480156104cd57600080fd5b506104a97f000000000000000000000000000000000000000000000000000000000000000081565b34801561050157600080fd5b506103057f3fc733b4d20d27a28452ddf0e9351aced28242fe03389a653cdb783955316b9b81565b34801561053557600080fd5b506102a061054436600461339d565b611255565b34801561055557600080fd5b506105696105643660046132f7565b6112d3565b604051610277929190613427565b34801561058357600080fd5b506102a06114a2565b34801561059857600080fd5b506102a06105a7366004613450565b611580565b3480156105b857600080fd5b506104a96105c736600461347e565b6115e3565b3480156105d857600080fd5b5061026b6105e73660046132c7565b6115fb565b3480156105f857600080fd5b50610305600081565b34801561060d57600080fd5b50610616611624565b6040516102779190613518565b34801561062f57600080fd5b50610305600080516020613b6983398151915281565b34801561065157600080fd5b50610665610660366004613648565b6119f8565b60405161027791906136aa565b34801561067e57600080fd5b506102a061068d36600461370c565b611aec565b34801561069e57600080fd5b506102a06106ad366004613450565b611c89565b3480156106be57600080fd5b506103056106cd3660046131fa565b611d4b565b3480156106de57600080fd5b5061026b6106ed366004613197565b611d62565b6102a061070036600461373a565b611e8b565b34801561071157600080fd5b506102a0610720366004613197565b611efb565b34801561073157600080fd5b506102a06107403660046132c7565b61200f565b34801561075157600080fd5b506104a9610760366004613197565b612034565b34801561077157600080fd5b50610853610780366004613197565b6003602081815260009283526040928390208054600182015460028301548651610120810188529584015461ffff808216885262010000808304821697890197909752600160201b808304821699890199909952600160301b820481166060890152600160401b90910481166080880152600485015460a0880152600585015460c0880152600685015460e08801526007909401546101008088019190915260ff808516989185041696958404909416949383046001600160401b031693600160601b9093046001600160a01b03169288565b60405161027798979695949392919061376f565b34801561087357600080fd5b506102a0610882366004613213565b612069565b34801561089357600080fd5b506103056108a2366004613197565b61225c565b3480156108b357600080fd5b506102a06108c2366004613213565b61228c565b3480156108d357600080fd5b506103056108e2366004613197565b61233f565b60006001600160e01b03198216635a05180f60e01b148061090c575061090c826126c7565b92915050565b6001600160a01b038116600090815260036020819052604090912060068101546007820154919092019190811561097557600060038401556109757f000000000000000000000000000000000000000000000000000000000000000085846126fc565b801561099e576000600484015560025461099e9061010090046001600160a01b031685836126fc565b811515806109ab57508015155b156109f65760408051838152602081018390526001600160a01b038616917f0146f1701c23c89f761280798d36d6c4e3acb349438456f5da8f83a2f5dd8cdc91015b60405180910390a25b50505050565b6000610a0781612728565b6001600160a01b038216610a2e57604051630d23cf4160e11b815260040160405180910390fd5b60028054610100600160a81b0319166101006001600160a01b038581168202929092179283905560405192041681527fc6a5dd316fe9d0339f2769deab7e31f64c8f5b101ffd85dfc9a83dbeaf2e69da906020015b60405180910390a15050565b600080516020613b69833981519152610aa781612728565b610ab18483612735565b610abc8585856126fc565b836001600160a01b03167f634235fcf5af0adbca1a405ec65f6f6c08f55e1f379c2c45cd10f23cb29e0e31610af08661233f565b6040805191825260208201879052015b60405180910390a25050505050565b6001600160a01b038216600090815260036020526040812054829062010000900461ffff16610b3d8561233f565b610b4791906137e7565b610b5191906137fe565b9392505050565b6000610b6381612728565b6000838584610b72898b613820565b610b7c9190613820565b610b869190613820565b610b909190613820565b90508061ffff1661271014610bc3576040516318410e1160e21b815261ffff821660048201526024015b60405180910390fd5b6000600360008a6001600160a01b03166001600160a01b031681526020019081526020016000206003019050878160000160006101000a81548161ffff021916908361ffff160217905550868160000160026101000a81548161ffff021916908361ffff160217905550858160000160046101000a81548161ffff021916908361ffff160217905550848160000160066101000a81548161ffff021916908361ffff160217905550838160000160086101000a81548161ffff021916908361ffff160217905550886001600160a01b03167f87512489f5b5226512d8f1bfede20d9e809ff4042f028da79c833ed04baa83978989898989604051610cf395949392919061ffff95861681529385166020850152918416604084015283166060830152909116608082015260a00190565b60405180910390a2505050505050505050565b600082815260208190526040902060010154610d2181612728565b610d2b83836128f6565b505050565b6001600160a01b0381163314610da05760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610bba565b610daa8282612918565b5050565b6001600160a01b038116600090815260036020526040902060058101548015801590610dea57508154600160601b90046001600160a01b031615155b15610d2b57600060058301558154610e1390600160601b90046001600160a01b031684836126fc565b826001600160a01b03167f1aa0fc6b9bc54a055d93b640b2c7313e0bd2944482e0b6b5fec7048bbdaacd8182604051610e4e91815260200190565b60405180910390a2505050565b6001600160a01b0380831660009081526003602052604081205490918491600160601b90041680610e9557610e90833361293a565b610ebe565b336001600160a01b03821614610ebe57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b03851660008181526003602052604090819020600101869055517f8b4a07860448b613116df3f175c837980eceaca7d1dc5143c46a20ab31ec00f990610b009087815260200190565b600080610f1d8385018561383b565b6001600160a01b03818116600090815260036020818152604080842081516101008082018452825460ff80821615158452828204161515838701526201000080820461ffff90811685880152600160201b8084046001600160401b0316606080880191909152600160601b909404909b16608080870191909152600187015460a080880191909152600288015460c080890191909152895161012081018b529b8901548085168d5294850484169a8c019a909a529b83048216978a0197909752600160301b8204811692890192909252600160401b90041693860193909352600482015496850196909652600581015492840192909252600682015460e08085019190915260079092015490830152830152929450909250908360018111156110485761104861385d565b14801561106057508060c001518160e0015160c00151115b156110735761106e82610dae565b6110bd565b60018360018111156110875761108761385d565b1480156110af575060c081015160e0808301516101008101519101516110ad9190613873565b115b156110bd576110bd82610912565b5050505050565b6001600160a01b0380831660009081526003602052604081205490918491600160601b900416806110fe576110f9833361293a565b611127565b336001600160a01b0382161461112757604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b03851661113d57349350611152565b6111526001600160a01b03861633308761299e565b846001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c85604051610b0091815260200190565b6001600160a01b0380831660009081526003602052604081205490918491600160601b900416806111c7576111c2833361293a565b6111f0565b336001600160a01b038216146111f057604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b038516600081815260036020908152604091829020805463ffff000019166201000061ffff8a169081029190911790915591519182527f68288b0936dd994d19323ee940b2703e7bf46fae2552319d60dc1239ba52ec689101610b00565b600061126081612728565b6001600160a01b03831660008181526003602090815260409182902080546bffffffffffffffff000000001916600160201b6001600160401b0388169081029190911790915591519182527fae367543cf47ca7e51a9f3f92711553aa33777847f719f7e2821ea8d846ed0e19101610e4e565b6000606081806112e58587018761383b565b6001600160a01b03818116600090815260036020818152604080842081516101008082018452825460ff80821615158452828204161515838701526201000080820461ffff90811685880152600160201b8084046001600160401b0316606080880191909152600160601b909404909b16608080870191909152600187015460a080880191909152600288015460c080890191909152895161012081018b529b8901548085168d5294850484169a8c019a909a529b83048216978a0197909752600160301b8204811692890192909252600160401b90041693860193909352600482015496850196909652600581015492840192909252600682015460e08085019190915260079092015490830152830152929450909250908360018111156114105761141061385d565b14801561142857508060c001518160e0015160c00151115b8061146a575060018360018111156114425761144261385d565b14801561146a575060c081015160e0808301516101008101519101516114689190613873565b115b1561149857600194508282604051602001611486929190613886565b60405160208183030381529060405293505b5050509250929050565b7f3fc733b4d20d27a28452ddf0e9351aced28242fe03389a653cdb783955316b9b6114cc81612728565b60005b60025460ff9081169082161015610daa5760ff81166000908152600460208181526040808420546001600160a01b0316808552600390925290922090810154801561156a57600060048301556115263384836126fc565b826001600160a01b03167fca64dbcaf91abfb066e7a5163f1d135f8f48f2cbdb0395e3b35cc278ebbd340b8260405161156191815260200190565b60405180910390a25b5050508080611578906138c0565b9150506114cf565b600061158b81612728565b6001600160a01b038316600081815260036020908152604091829020805460ff191686151590811790915591519182527fe589eb036e62c07e307aa4d441bd39c81e8bd86f349eaacb0caa06b1477f7f9a9101610e4e565b6000828152600160205260408120610b519083612a09565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60025460609060009060ff166001600160401b03811115611647576116476138df565b60405190808252806020026020018201604052801561168057816020015b61166d61309b565b8152602001906001900390816116655790505b50905060005b60025460ff90811690821610156119f25760ff8181166000908152600460208181526040808420546001600160a01b03908116808652600380855295839020835161010080820186528254808b1615158352818104909a1615158288015262010000808b0461ffff90811684890152600160201b808d046001600160401b0316606080870191909152600160601b909d04909716608080860191909152600186015460a080870191909152600287015460c0808801919091528a5161012081018c529d8801548085168f5294850484169b8e019b909b529783048216988c0198909852600160301b820481169b8b019b909b52600160401b9004909916948801949094529485015491860191909152600584015492850192909252600683015460e08086019190915260079093015494840194909452908301919091529081611858576040518060a00160405280601260ff168152602001836001600160a01b031681526020016040518060400160405280600381526020016208aa8960eb1b81525081526020016040518060400160405280600381526020016208aa8960eb1b815250815260200182815250848460ff1681518110611848576118486138f5565b60200260200101819052506119dd565b60008290506040518060a00160405280826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ca919061390b565b60ff168152602001846001600160a01b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561191f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611947919081019061392e565b8152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561198a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119b2919081019061392e565b815260200183815250858560ff16815181106119d0576119d06138f5565b6020026020010181905250505b505080806119ea906138c0565b915050611686565b50919050565b6060816001600160401b03811115611a1257611a126138df565b604051908082528060200260200182016040528015611a4557816020015b6060815260200190600190039081611a305790505b50905060005b82811015611ae557611ab530858584818110611a6957611a696138f5565b9050602002810190611a7b91906139cf565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a1592505050565b828281518110611ac757611ac76138f5565b60200260200101819052508080611add90613a1c565b915050611a4b565b5092915050565b6001600160a01b0380831660009081526003602052604081205490918491600160601b90041680611b2657611b21833361293a565b611b4f565b336001600160a01b03821614611b4f57604051634ca8886760e01b815260040160405180910390fd5b6000611b68600080516020613b69833981519152611d4b565b905060005b81811015611bfd57611b8d600080516020613b69833981519152826115e3565b60405163383e6aaf60e11b81526001600160a01b038981166004830152919091169063707cd55e90602401600060405180830381600087803b158015611bd257600080fd5b505af1158015611be6573d6000803e3d6000fd5b505050508080611bf590613a1c565b915050611b6d565b50611c0786610dae565b611c14866108828861233f565b6001600160a01b0386811660008181526003602090815260409182902080546bffffffffffffffffffffffff16600160601b958b16958602179055905192835290917fc991529379552af6d0789cc899d5180a270a4bc3b1a3892adcac3d95f93dda1d910160405180910390a2505050505050565b6001600160a01b0380831660009081526003602052604081205490918491600160601b90041680611cc357611cbe833361293a565b611cec565b336001600160a01b03821614611cec57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0385166000818152600360205260409081902080548715156101000261ff0019909116179055517f624dd6809915867c3c11279c2699633040681f0e4efb0fa9a193217a11903c6090610b0090871515815260200190565b600081815260016020526040812061090c90612a3a565b6001600160a01b03818116600090815260036020818152604080842081516101008082018452825460ff80821615158452828204161515838701526201000080820461ffff90811685880152600160201b8084046001600160401b0316606080880191909152600160601b909404909b16608080870191909152600187015460a080880191909152600288015460c080890191909152895161012081018b529b8901548085168d5294850484169a8c019a909a529b83048216978a0197909752600160301b8204811692890192909252600160401b90041693860193909352600482015496850196909652600581015492840192909252600682015460e0808501919091526007909201549083015283015281519091908015610b515750602001511592915050565b600080516020613b69833981519152611ea381612728565b8115611eb357611eb38483612735565b836001600160a01b03167f812b76b477469edc716929cbf7ed54e3d9c1a68d8b9f8290dbabcda54d96fcbe611ee78661233f565b6040805191825260208201879052016109ed565b6000611f0681612728565b60025460ff1615611f775760005b60025460ff9081169082161015611f755760ff81166000908152600460205260409020546001600160a01b03808516911603611f6357604051632ae3f45d60e11b815260040160405180910390fd5b80611f6d816138c0565b915050611f14565b505b6002805460ff908116600090815260046020526040812080546001600160a01b0319166001600160a01b038716179055825460019392611fb991859116613a35565b92506101000a81548160ff021916908360ff1602179055507fe473c74f34be27c1464d6624f14a0d7fd4e301cbfa29c3eba425d378c8a7ebe082604051610a8391906001600160a01b0391909116815260200190565b60008281526020819052604090206001015461202a81612728565b610d2b8383612918565b6001600160a01b038082166000908152600360205260408120549091600160601b909104168061090c57610b516000806115e3565b6001600160a01b0380831660009081526003602052604081205490918491600160601b900416806120a35761209e833361293a565b6120cc565b336001600160a01b038216146120cc57604051634ca8886760e01b815260040160405180910390fd5b60006120d78661233f565b90508015612254576001600160a01b038616600090815260036020526040902054610100900460ff1661211d576040516393b3a85d60e01b815260040160405180910390fd5b6000612136600080516020613b69833981519152611d4b565b905060005b818110156121f75761215b600080516020613b69833981519152826115e3565b60405163594043fd60e01b81526001600160a01b038a81166004830152919091169063594043fd90602401602060405180830381865afa1580156121a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c79190613a4e565b156121e55760405163055212b760e51b815260040160405180910390fd5b806121ef81613a1c565b91505061213b565b5081861115612204578195505b61220f3388886126fc565b866001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648760405161224a91815260200190565b60405180910390a2505b505050505050565b6001600160a01b03811660009081526003602052604090206001015461271081101561228757506127105b919050565b6001600160a01b0380831660009081526003602052604081205490918491600160601b900416806122c6576122c1833361293a565b6122ef565b336001600160a01b038216146122ef57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b03851660008181526003602052604090819020600201869055517f2c799d8bd0ce047a73ee6661740b3e780a2a13dd04c1201fca543f181bdff5ff90610b009087815260200190565b6000806001600160a01b0383166123575750476123c2565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa15801561239b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bf9190613a6b565b90505b6001600160a01b0383166000908152600360208181526040928390208351610120810185529281015461ffff8082168552620100008204811693850193909352600160201b8104831694840194909452600160301b840482166060840152600160401b909304166080820152600482015460a08201819052600583015460c08301819052600684015460e08401819052600790940154610100840181905292939161246d9086613a84565b6124779190613a84565b6124819190613a84565b61248b9190613a84565b949350505050565b61249d82826115fb565b610daa576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556124d33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610b51836001600160a01b038416612a44565b6060600061253b8360026137e7565b612546906002613873565b6001600160401b0381111561255d5761255d6138df565b6040519080825280601f01601f191660200182016040528015612587576020820181803683370190505b509050600360fc1b816000815181106125a2576125a26138f5565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106125d1576125d16138f5565b60200101906001600160f81b031916908160001a90535060006125f58460026137e7565b612600906001613873565b90505b6001811115612678576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612634576126346138f5565b1a60f81b82828151811061264a5761264a6138f5565b60200101906001600160f81b031916908160001a90535060049490941c9361267181613a97565b9050612603565b508315610b515760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610bba565b60006001600160e01b03198216637965db0b60e01b148061090c57506301ffc9a760e01b6001600160e01b031983161461090c565b6001600160a01b03821661271457610d2b8382612a93565b610d2b6001600160a01b0383168483612bac565b612732813361293a565b50565b6001600160a01b03821660009081526003602081905260408220018054909190600160201b900461ffff16156127a65781546127109061278090600160201b900461ffff16856137e7565b61278a91906137fe565b9050808260020160008282546127a09190613873565b90915550505b8154600090612710906127c39062010000900461ffff16866137e7565b6127cd91906137fe565b9050808360010160008282546127e39190613873565b90915550508254600090612710906127ff9061ffff16876137e7565b61280991906137fe565b84549091506000906127109061282a90600160301b900461ffff16886137e7565b61283491906137fe565b90508085600301600082825461284a9190613873565b909155505084546000906127109061286d90600160401b900461ffff16896137e7565b61287791906137fe565b90508086600401600082825461288d9190613873565b9091555050604080518481526020810186905290810186905260608101839052608081018290526001600160a01b038916907fc73e6f5bcd4395126567ead7e4c14b7c52a5f0b9eabd3335a05e631646a127e39060a00160405180910390a25050505050505050565b6129008282612493565b6000828152600160205260409020610d2b9082612517565b6129228282612bdc565b6000828152600160205260409020610d2b9082612c41565b61294482826115fb565b610daa5761295c816001600160a01b0316601461252c565b61296783602061252c565b604051602001612978929190613aae565b60408051601f198184030181529082905262461bcd60e51b8252610bba91600401613b23565b6040516001600160a01b03808516602483015283166044820152606481018290526109f69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c56565b6000610b518383612d28565b6060610b518383604051806060016040528060278152602001613b8960279139612d52565b600061090c825490565b6000818152600183016020526040812054612a8b5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561090c565b50600061090c565b80471015612ae35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610bba565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612b30576040519150601f19603f3d011682016040523d82523d6000602084013e612b35565b606091505b5050905080610d2b5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610bba565b6040516001600160a01b038316602482015260448101829052610d2b90849063a9059cbb60e01b906064016129d2565b612be682826115fb565b15610daa576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610b51836001600160a01b038416612e2f565b6000612cab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f229092919063ffffffff16565b805190915015610d2b5780806020019051810190612cc99190613a4e565b610d2b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610bba565b6000826000018281548110612d3f57612d3f6138f5565b9060005260206000200154905092915050565b60606001600160a01b0384163b612dba5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610bba565b600080856001600160a01b031685604051612dd59190613b36565b600060405180830381855af49150503d8060008114612e10576040519150601f19603f3d011682016040523d82523d6000602084013e612e15565b606091505b5091509150612e25828286612f31565b9695505050505050565b60008181526001830160205260408120548015612f18576000612e53600183613a84565b8554909150600090612e6790600190613a84565b9050818114612ecc576000866000018281548110612e8757612e876138f5565b9060005260206000200154905080876000018481548110612eaa57612eaa6138f5565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612edd57612edd613b52565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061090c565b600091505061090c565b606061248b8484600085612f6a565b60608315612f40575081610b51565b825115612f505782518084602001fd5b8160405162461bcd60e51b8152600401610bba9190613b23565b606082471015612fcb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610bba565b6001600160a01b0385163b6130225760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bba565b600080866001600160a01b0316858760405161303e9190613b36565b60006040518083038185875af1925050503d806000811461307b576040519150601f19603f3d011682016040523d82523d6000602084013e613080565b606091505b5091509150613090828286612f31565b979650505050505050565b6040518060a00160405280600060ff16815260200160006001600160a01b031681526020016060815260200160608152602001613153604080516101008082018352600080835260208084018290528385018290526060808501839052608080860184905260a080870185905260c0808801869052885161012081018a528681529485018690529784018590529183018490528201839052810182905293840181905260e08481018290529184015290919082015290565b905290565b60006020828403121561316a57600080fd5b81356001600160e01b031981168114610b5157600080fd5b6001600160a01b038116811461273257600080fd5b6000602082840312156131a957600080fd5b8135610b5181613182565b600080600080608085870312156131ca57600080fd5b84356131d581613182565b935060208501356131e581613182565b93969395505050506040820135916060013590565b60006020828403121561320c57600080fd5b5035919050565b6000806040838503121561322657600080fd5b823561323181613182565b946020939093013593505050565b803561ffff8116811461228757600080fd5b60008060008060008060c0878903121561326a57600080fd5b863561327581613182565b95506132836020880161323f565b94506132916040880161323f565b935061329f6060880161323f565b92506132ad6080880161323f565b91506132bb60a0880161323f565b90509295509295509295565b600080604083850312156132da57600080fd5b8235915060208301356132ec81613182565b809150509250929050565b6000806020838503121561330a57600080fd5b82356001600160401b038082111561332157600080fd5b818501915085601f83011261333557600080fd5b81358181111561334457600080fd5b86602082850101111561335657600080fd5b60209290920196919550909350505050565b6000806040838503121561337b57600080fd5b823561338681613182565b91506133946020840161323f565b90509250929050565b600080604083850312156133b057600080fd5b82356133bb81613182565b915060208301356001600160401b03811681146132ec57600080fd5b60005b838110156133f25781810151838201526020016133da565b50506000910152565b600081518084526134138160208601602086016133d7565b601f01601f19169290920160200192915050565b821515815260406020820152600061248b60408301846133fb565b801515811461273257600080fd5b6000806040838503121561346357600080fd5b823561346e81613182565b915060208301356132ec81613442565b6000806040838503121561349157600080fd5b50508035926020909101359150565b61ffff8082511683528060208301511660208401528060408301511660408401525060608101516134d7606084018261ffff169052565b5060808101516134ed608084018261ffff169052565b5060a0818101519083015260c0808201519083015260e0808201519083015261010090810151910152565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561363a57888303603f190185528151805160ff168452878101516001600160a01b0316888501528681015161028088860181905290613584828701826133fb565b9150506060808301518683038288015261359e83826133fb565b925050608080840151935083511515818801528a84015160a0811515818a01528b860151915060c061ffff8316818b015284870151945060e092506135ed838b01866001600160401b03169052565b928601516001600160a01b03166101008a0152850151610120890152908401516101408801529092015191506136276101608601836134a0565b958801959350509086019060010161353f565b509098975050505050505050565b6000806020838503121561365b57600080fd5b82356001600160401b038082111561367257600080fd5b818501915085601f83011261368657600080fd5b81358181111561369557600080fd5b8660208260051b850101111561335657600080fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156136ff57603f198886030184526136ed8583516133fb565b945092850192908501906001016136d1565b5092979650505050505050565b6000806040838503121561371f57600080fd5b823561372a81613182565b915060208301356132ec81613182565b60008060006060848603121561374f57600080fd5b833561375a81613182565b95602085013595506040909401359392505050565b8815158152871515602082015261ffff871660408201526001600160401b03861660608201526001600160a01b038516608082015260a0810184905260c0810183905261020081016137c460e08301846134a0565b9998505050505050505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761090c5761090c6137d1565b60008261381b57634e487b7160e01b600052601260045260246000fd5b500490565b61ffff818116838216019080821115611ae557611ae56137d1565b6000806040838503121561384e57600080fd5b82356002811061372a57600080fd5b634e487b7160e01b600052602160045260246000fd5b8082018082111561090c5761090c6137d1565b60408101600284106138a857634e487b7160e01b600052602160045260246000fd5b9281526001600160a01b039190911660209091015290565b600060ff821660ff81036138d6576138d66137d1565b60010192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561391d57600080fd5b815160ff81168114610b5157600080fd5b60006020828403121561394057600080fd5b81516001600160401b038082111561395757600080fd5b818401915084601f83011261396b57600080fd5b81518181111561397d5761397d6138df565b604051601f8201601f19908116603f011681019083821181831017156139a5576139a56138df565b816040528281528760208487010111156139be57600080fd5b6130908360208301602088016133d7565b6000808335601e198436030181126139e657600080fd5b8301803591506001600160401b03821115613a0057600080fd5b602001915036819003821315613a1557600080fd5b9250929050565b600060018201613a2e57613a2e6137d1565b5060010190565b60ff818116838216019081111561090c5761090c6137d1565b600060208284031215613a6057600080fd5b8151610b5181613442565b600060208284031215613a7d57600080fd5b5051919050565b8181038181111561090c5761090c6137d1565b600081613aa657613aa66137d1565b506000190190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613ae68160178501602088016133d7565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613b178160288401602088016133d7565b01602801949350505050565b602081526000610b5160208301846133fb565b60008251613b488184602087016133d7565b9190910192915050565b634e487b7160e01b600052603160045260246000fdfe6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa88416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220041ed88ba201ae3acecea0e93e9bf1d28478b4eb813f4e901b2919231c68351064736f6c63430008120033",
  "devdoc": {
    "author": "Romuald Hog",
    "details": "All rates are in basis point.",
    "errors": {
      "WrongHouseEdgeSplit(uint16)": [
        {
          "params": {
            "splitSum": "Sum of the house edge allocations rates."
          }
        }
      ]
    },
    "events": {
      "AddToken(address)": {
        "params": {
          "token": "Address of the token."
        }
      },
      "AllocateHouseEdgeAmount(address,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "bank": "The number of tokens allocated to bank.",
          "dividend": "The number of tokens allocated as staking rewards.",
          "partner": "The number of tokens allocated to the partner.",
          "team": "The number of tokens allocated to the team.",
          "token": "Address of the token.",
          "treasury": "The number of tokens allocated to the treasury."
        }
      },
      "CashIn(address,uint256,uint256)": {
        "params": {
          "amount": "Bet amount collected.",
          "newBalance": "New token balance.",
          "token": "Address of the token."
        }
      },
      "Deposit(address,uint256)": {
        "params": {
          "amount": "The number of token deposited.",
          "token": "Address of the token."
        }
      },
      "HarvestDividend(address,uint256)": {
        "params": {
          "amount": "The number of tokens sent to the Harvester.",
          "token": "Address of the token."
        }
      },
      "HouseEdgeDistribution(address,uint256,uint256)": {
        "params": {
          "teamAmount": "The number of tokens sent to the team.",
          "token": "Address of the token.",
          "treasuryAmount": "The number of tokens sent to the treasury."
        }
      },
      "HouseEdgePartnerDistribution(address,uint256)": {
        "params": {
          "partnerAmount": "The number of tokens sent to the partner.",
          "token": "Address of the token."
        }
      },
      "Payout(address,uint256,uint256)": {
        "params": {
          "newBalance": "New token balance.",
          "profit": "Bet profit amount sent.",
          "token": "Address of the token."
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "SetAllowedToken(address,bool)": {
        "params": {
          "allowed": "Whether the token is allowed for betting.",
          "token": "Address of the token."
        }
      },
      "SetBalanceRisk(address,uint16)": {
        "params": {
          "balanceRisk": "Rate defining the balance risk."
        }
      },
      "SetMinHouseEdgeWithdrawAmount(address,uint256)": {
        "params": {
          "minHouseEdgeWithdrawAmount": "Minimum amount of token to allow transfer.",
          "token": "Address of the token."
        }
      },
      "SetPausedToken(address,bool)": {
        "params": {
          "paused": "Whether the token is paused for betting.",
          "token": "Address of the token."
        }
      },
      "SetTeamWallet(address)": {
        "params": {
          "teamWallet": "The team wallet address."
        }
      },
      "SetTokenHouseEdgeSplit(address,uint16,uint16,uint16,uint16,uint16)": {
        "params": {
          "bank": "Rate to be allocated to the bank, on bet payout.",
          "dividend": "Rate to be allocated as staking rewards, on bet payout.",
          "partner": "Rate to be allocated to the partner, on bet payout.",
          "team": "Rate to be allocated to the team, on bet payout.",
          "token": "Address of the token.",
          "treasury": "Rate to be allocated to the treasury, on bet payout."
        }
      },
      "SetTokenMinBetAmount(address,uint256)": {
        "params": {
          "minBetAmount": "Minimum bet amount.",
          "token": "Address of the token."
        }
      },
      "SetTokenPartner(address,address)": {
        "params": {
          "partner": "Address of the partner.",
          "token": "Address of the token."
        }
      },
      "SetTokenVRFSubId(address,uint64)": {
        "params": {
          "subId": "Subscription ID.",
          "token": "Address of the token."
        }
      },
      "Withdraw(address,uint256)": {
        "params": {
          "amount": "The number of token withdrawn.",
          "token": "Address of the token."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addToken(address)": {
        "params": {
          "token": "Address of the token."
        }
      },
      "cashIn(address,uint256,uint256)": {
        "details": "In case of an ERC20, the bet amount should be transfered prior to this tx.In case of the gas token, the bet amount is sent along with this tx.",
        "params": {
          "amount": "Loss bet amount.",
          "fees": "Bet amount and bet profit fees amount.",
          "tokenAddress": "Address of the token."
        }
      },
      "checkUpkeep(bytes)": {
        "details": "`checkData` and `performData` are encoded with types (uint8, address).",
        "params": {
          "checkData": "Fixed and specified at Upkeep registration."
        },
        "returns": {
          "performData": "Bytes that will be used as input parameter when calling performUpkeep.",
          "upkeepNeeded": "Boolean that when True will trigger the on-chain performUpkeep call."
        }
      },
      "constructor": {
        "params": {
          "teamWalletAddress": "Team wallet.",
          "treasuryAddress": "Treasury multi-sig wallet."
        }
      },
      "deposit(address,uint256)": {
        "params": {
          "amount": "Number of tokens.",
          "token": "Address of the token."
        }
      },
      "getBalance(address)": {
        "params": {
          "token": "Address of the token."
        },
        "returns": {
          "_0": "The amount of token available for profits."
        }
      },
      "getMaxBetAmount(address,uint256)": {
        "details": "The multiplier should be at least 10000.",
        "params": {
          "multiplier": "The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.",
          "token": "Address of the token."
        },
        "returns": {
          "_0": "Maximum bet amount for the token."
        }
      },
      "getMinBetAmount(address)": {
        "details": "The min bet amount should be at least 10000 cause of the `getMaxBetAmount` calculation.",
        "params": {
          "token": "Address of the token."
        },
        "returns": {
          "minBetAmount": "Min bet amount."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getTokenOwner(address)": {
        "params": {
          "token": "Address of the token."
        },
        "returns": {
          "_0": "Address of the owner."
        }
      },
      "getTokens()": {
        "details": "For the front-end"
      },
      "getVRFSubId(address)": {
        "params": {
          "token": "Address of the token."
        },
        "returns": {
          "_0": "Chainlink VRF v2 Subscription ID."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAllowedToken(address)": {
        "params": {
          "tokenAddress": "Address of the token."
        },
        "returns": {
          "_0": "Whether the token is enabled for bets."
        }
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "payout(address,address,uint256,uint256)": {
        "params": {
          "fees": "Bet amount and bet profit fees amount.",
          "profit": "Number of tokens to be sent to the gamer.",
          "token": "Address of the token.",
          "user": "Address of the gamer."
        }
      },
      "performUpkeep(bytes)": {
        "params": {
          "performData": "Data which was passed back from `checkUpkeep`."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAllowedToken(address,bool)": {
        "params": {
          "allowed": "Whether the token is enabled for bets.",
          "token": "Address of the token."
        }
      },
      "setBalanceRisk(address,uint16)": {
        "params": {
          "balanceRisk": "Risk rate.",
          "token": "Address of the token."
        }
      },
      "setHouseEdgeSplit(address,uint16,uint16,uint16,uint16,uint16)": {
        "details": "`bank`, `dividend`, `_treasury` and `team` rates sum must equals 10000.",
        "params": {
          "_treasury": "Rate to be allocated to the treasury, on bet payout.",
          "bank": "Rate to be allocated to the bank, on bet payout.",
          "dividend": "Rate to be allocated as staking rewards, on bet payout.",
          "partner": "Rate to be allocated to the partner, on bet payout.",
          "team": "Rate to be allocated to the team, on bet payout.",
          "token": "Address of the token."
        }
      },
      "setMinHouseEdgeWithdrawAmount(address,uint256)": {
        "params": {
          "minHouseEdgeWithdrawAmount": "Minimum amount of token to allow transfer.",
          "token": "Address of the token."
        }
      },
      "setPausedToken(address,bool)": {
        "params": {
          "paused": "Whether the token is paused.",
          "token": "Address of the token."
        }
      },
      "setTeamWallet(address)": {
        "params": {
          "_teamWallet": "The team wallet address."
        }
      },
      "setTokenMinBetAmount(address,uint256)": {
        "params": {
          "token": "Address of the token.",
          "tokenMinBetAmount": "Minimum bet amount."
        }
      },
      "setTokenPartner(address,address)": {
        "params": {
          "partner": "Address of the partner.",
          "token": "Address of the token."
        }
      },
      "setTokenVRFSubId(address,uint64)": {
        "params": {
          "subId": "Subscription ID.",
          "token": "Address of the token."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "Number of tokens.",
          "token": "Address of the token."
        }
      },
      "withdrawHouseEdgeAmount(address)": {
        "params": {
          "tokenAddress": "Address of the token."
        }
      },
      "withdrawPartnerAmount(address)": {
        "params": {
          "tokenAddress": "Address of the token."
        }
      }
    },
    "title": "BetSwirl's Bank",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AccessDenied()": [
        {
          "notice": "Reverting error when sender isn't allowed."
        }
      ],
      "TokenExists()": [
        {
          "notice": "Reverting error when trying to add an existing token."
        }
      ],
      "TokenHasPendingBets()": [
        {
          "notice": "Reverting error when token has pending bets on a game."
        }
      ],
      "TokenNotPaused()": [
        {
          "notice": "Reverting error when withdrawing a non paused token."
        }
      ],
      "WrongAddress()": [
        {
          "notice": "Reverting error when team wallet or treasury is the zero address."
        }
      ],
      "WrongHouseEdgeSplit(uint16)": [
        {
          "notice": "Reverting error when setting the house edge allocations, but the sum isn't 100%."
        }
      ]
    },
    "events": {
      "AddToken(address)": {
        "notice": "Emitted after a token is added."
      },
      "AllocateHouseEdgeAmount(address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted after the token's house edge is allocated."
      },
      "CashIn(address,uint256,uint256)": {
        "notice": "Emitted after the bet amount is collected from the game smart contract."
      },
      "Deposit(address,uint256)": {
        "notice": "Emitted after a token deposit."
      },
      "HarvestDividend(address,uint256)": {
        "notice": "Emitted after the token's dividend allocation is distributed."
      },
      "HouseEdgeDistribution(address,uint256,uint256)": {
        "notice": "Emitted after the token's treasury and team allocations are distributed."
      },
      "HouseEdgePartnerDistribution(address,uint256)": {
        "notice": "Emitted after the token's partner allocation is distributed."
      },
      "Payout(address,uint256,uint256)": {
        "notice": "Emitted after the bet profit amount is sent to the user."
      },
      "SetAllowedToken(address,bool)": {
        "notice": "Emitted after a token is allowed."
      },
      "SetBalanceRisk(address,uint16)": {
        "notice": "Emitted after the balance risk is set."
      },
      "SetMinHouseEdgeWithdrawAmount(address,uint256)": {
        "notice": "Emitted after the Upkeep minimum transfer amount is set."
      },
      "SetPausedToken(address,bool)": {
        "notice": "Emitted after a token is paused."
      },
      "SetTeamWallet(address)": {
        "notice": "Emitted after the team wallet is set."
      },
      "SetTokenHouseEdgeSplit(address,uint16,uint16,uint16,uint16,uint16)": {
        "notice": "Emitted after the token's house edge allocations for bet payout is set."
      },
      "SetTokenMinBetAmount(address,uint256)": {
        "notice": "Emitted after the minimum bet amount is set for a token."
      },
      "SetTokenPartner(address,address)": {
        "notice": "Emitted after a token partner is set."
      },
      "SetTokenVRFSubId(address,uint64)": {
        "notice": "Emitted after the token's VRF subscription ID is set."
      },
      "Withdraw(address,uint256)": {
        "notice": "Emitted after a token withdrawal."
      }
    },
    "kind": "user",
    "methods": {
      "GAME_ROLE()": {
        "notice": "Role associated to Games smart contracts."
      },
      "HARVESTER_ROLE()": {
        "notice": "Role associated to harvester smart contract."
      },
      "addToken(address)": {
        "notice": "Adds a new token that'll be enabled for the games' betting. Token shouldn't exist yet."
      },
      "cashIn(address,uint256,uint256)": {
        "notice": "Accounts a loss bet."
      },
      "checkUpkeep(bytes)": {
        "notice": "Runs by Chainlink Keepers at every block to determine if `performUpkeep` should be called."
      },
      "deposit(address,uint256)": {
        "notice": "Deposit funds in the bank to allow gamers to win more. ERC20 token allowance should be given prior to deposit."
      },
      "getBalance(address)": {
        "notice": "Gets the token's balance. The token's house edge allocation amounts are subtracted from the balance."
      },
      "getMaxBetAmount(address,uint256)": {
        "notice": "Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier."
      },
      "getMinBetAmount(address)": {
        "notice": "Gets the token's min bet amount."
      },
      "getTokenOwner(address)": {
        "notice": "Gets the token's owner."
      },
      "getVRFSubId(address)": {
        "notice": "Gets the token's Chainlink VRF v2 Subscription ID."
      },
      "harvestDividends()": {
        "notice": "Harvests tokens dividends."
      },
      "isAllowedToken(address)": {
        "notice": "Gets the token's allow status used on the games smart contracts."
      },
      "payout(address,address,uint256,uint256)": {
        "notice": "Payouts a winning bet, and allocate the house edge fee."
      },
      "performUpkeep(bytes)": {
        "notice": "Executed by Chainlink Keepers when `upkeepNeeded` is true."
      },
      "setAllowedToken(address,bool)": {
        "notice": "Changes the token's bet permission."
      },
      "setBalanceRisk(address,uint16)": {
        "notice": "Sets the new token balance risk."
      },
      "setHouseEdgeSplit(address,uint16,uint16,uint16,uint16,uint16)": {
        "notice": "Sets the token's house edge allocations for bet payout."
      },
      "setMinHouseEdgeWithdrawAmount(address,uint256)": {
        "notice": "Changes the token's Upkeep min transfer amount."
      },
      "setPausedToken(address,bool)": {
        "notice": "Changes the token's paused status."
      },
      "setTeamWallet(address)": {
        "notice": "Sets the new team wallet."
      },
      "setTokenMinBetAmount(address,uint256)": {
        "notice": "Sets the minimum bet amount for a specific token."
      },
      "setTokenPartner(address,address)": {
        "notice": "Changes the token's partner address. It withdraw the available balance, the partner allocation, and the games' VRF fees."
      },
      "setTokenVRFSubId(address,uint64)": {
        "notice": "Sets the Chainlink VRF subscription ID for a specific token."
      },
      "teamWallet()": {
        "notice": "Team wallet."
      },
      "tokens(address)": {
        "notice": "Maps tokens addresses to token configuration."
      },
      "treasury()": {
        "notice": "Treasury multi-sig wallet."
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw funds from the bank. Token has to be paused and no pending bet resolution on games."
      },
      "withdrawHouseEdgeAmount(address)": {
        "notice": "Distributes the token's treasury and team allocations amounts."
      },
      "withdrawPartnerAmount(address)": {
        "notice": "Distributes the token's partner amount."
      }
    },
    "notice": "The Bank contract holds the casino's funds, whitelist the games betting tokens, define the max bet amount based on a risk, payout the bet profit to user and collect the loss bet amount from the game's contract, split and allocate the house edge taken from each bet (won or loss). The admin role is transfered to a Timelock that execute administrative tasks, only the Games could payout the bet profit from the bank, and send the loss bet amount to the bank.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/bank/Bank.sol:Bank",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)239_storage)"
      },
      {
        "astId": 558,
        "contract": "contracts/bank/Bank.sol:Bank",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2975_storage)"
      },
      {
        "astId": 3357,
        "contract": "contracts/bank/Bank.sol:Bank",
        "label": "_tokensCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 3363,
        "contract": "contracts/bank/Bank.sol:Bank",
        "label": "teamWallet",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3381,
        "contract": "contracts/bank/Bank.sol:Bank",
        "label": "tokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Token)3342_storage)"
      },
      {
        "astId": 3386,
        "contract": "contracts/bank/Bank.sol:Bank",
        "label": "_tokensList",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint8,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Token)3342_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Bank.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)3342_storage"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2975_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2975_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)239_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)239_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AddressSet)2975_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2974,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2674_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(HouseEdgeSplit)3324_storage": {
        "encoding": "inplace",
        "label": "struct Bank.HouseEdgeSplit",
        "members": [
          {
            "astId": 3307,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "bank",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3309,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "dividend",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3311,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "partner",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3313,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "treasury",
            "offset": 6,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3315,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "team",
            "offset": 8,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3317,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "dividendAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3319,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "partnerAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3321,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "treasuryAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3323,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "teamAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)239_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 236,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 238,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2674_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2669,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2673,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Token)3342_storage": {
        "encoding": "inplace",
        "label": "struct Bank.Token",
        "members": [
          {
            "astId": 3326,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "allowed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3328,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "paused",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3330,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "balanceRisk",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3332,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "VRFSubId",
            "offset": 4,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3334,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "partner",
            "offset": 12,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3336,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "minBetAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3338,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "minHouseEdgeWithdrawAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3341,
            "contract": "contracts/bank/Bank.sol:Bank",
            "label": "houseEdgeSplit",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(HouseEdgeSplit)3324_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}